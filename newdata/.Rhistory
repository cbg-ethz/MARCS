"#77AADD","#AA4488","red3","#DDCC77","#777711","#AAAA44","#202020","#44AA77",
"#88CCAA","#1122AA","#44AA00","#77CC77", "#771155","#AA4488","darkgrey")
riskcolor <- c("#202020","#774411","#DDAA77","#440154", "#453581","#34618D","#24878E","#88CCAA","#77CC77")
# p1_riskNew <- ggbarplot(melt(cancer_table), "Var1", "value",
#                         fill = "Var2", palette = riskcolor, color = NA,
#                         label = TRUE, lab.col = NA)+
#   # label = TRUE, lab.col = "white", lab.pos = "in")+
#   scale_fill_manual(breaks=c("ELN2022_adverse","ELN2022_intermediate","ELN2022_favorable","IPSSM_Very-High", "IPSSM_High", "IPSSM_Moderate-High","IPSSM_Moderate-Low","IPSSM_Low", "IPSSM_Very-Low"), values=riskcolor)+
#   #scale_fill_manual(values=c("ELN2022_adverse"="#202020","ELN2022_intermediate"="#774411","ELN2022_favorable"="#DDAA77","IPSSM_Very-High"="#440154FF", "IPSSM_High"="#453581FF", "IPSSM_Moderate-High"="#34618DFF","IPSSM_Moderate-Low"="#24878EFF","IPSSM_Low" ="#40BC72FF", "IPSSM_Very-Low"="#CBE11EFF"))+
#   xlab("Clusters") +
#   ylab("Number of Patients") +
#   theme(legend.key.size = unit(0.2, 'cm'),
#         legend.text = element_text(size=8)) +
#
#   guides(fill=guide_legend(title="Risk Stratification (ELN2022,IPSS-M)"),col = FALSE)+
#   theme(legend.position="right"); p1_riskNew
#
# p1_riskNew
### BARPLOT ON WHO2016 DIAGNOSIS
k_clust <- length(levels(as.factor(cluster_results$clustermembership)))
n_cancer_type <- length(table(mutation_covariate_data$WHO_2016))
cancer_table <- matrix(NA, k_clust, n_cancer_type)
cancer_names <- names(table(mutation_covariate_data$WHO_2016))
colnames(cancer_table) <- cancer_names
rownames(cancer_table) <- LETTERS[1:k_clust]
for (ii in 1:k_clust){
temp_count <- c()
for (jj in 1:n_cancer_type){
temp_count <- c(temp_count, length(which(mutation_covariate_data$WHO_2016[which(cluster_results$clustermembership==ii)]==cancer_names[jj])))
}
cancer_table[ii,] <- temp_count
}
col2016 <- c("grey20","#ee4455ff","#CC99BB","#ee7688ff","#CC4477",
"#771122","#771155","#aa0066",
"#a03020", "#BB4455ff", "#991122","#771188",
"grey35",
"#DDCC77","#777711",
"#88CCAA","#117777","#44AAAA","#77CCCC",
"#77AADD","#114477","#4477AA","#1177AA","darkblue",
"#AAAA4477","#117744","#44AA77","darkgrey")
p1_2016 <- ggbarplot(melt(cancer_table), "Var1", "value",
fill = "Var2", color = NA, palette = col2016,
label = TRUE, lab.col = NA)+
scale_fill_manual(breaks=c("aCML", "AML CEBPAbi","AML inv(16)", "AML NPM1","AML t(8;21)",
"AML inv(3)","AML MRC", "AML NOS",
"AML RUNX1","AML t(15;17)", "AML t(6;9)", "AML t(9;11)",
"CMML",
"HR-MDS", "LR-MDS",
"MDS-del5q", "MDS-RS-MLD", "MDS-RS-SLD", "MDS-RS-SLD/MLD",
"MDS-SLD","MDS-SLD/MLD","MDS-MLD", "MDS-EB1", "MDS-EB2",
"MDS-U","MDS/MPN-RS-T","MDS/MPN-U","other") , values = col2016)+
# label = TRUE, lab.col = "white", lab.pos = "in")+
xlab("Clusters") +
ylab("Number of Patients") +
theme(legend.key.size = unit(0.4, 'cm'),
legend.text = element_text(size=12)) +
# ylab("") +
guides(fill=guide_legend(title="Type (WHO2016)"),col = FALSE)+
theme(legend.position="right")
p1_2016
### BARPLOT ON WHO2022 DIAGNOSIS
k_clust <- length(levels(as.factor(cluster_results$clustermembership)))
n_cancer_type <- length(table(mutation_covariate_data$WHO_2022))
cancer_table <- matrix(NA, k_clust, n_cancer_type)
cancer_names <- names(table(mutation_covariate_data$WHO_2022))
colnames(cancer_table) <- cancer_names
rownames(cancer_table) <- LETTERS[1:k_clust]
for (ii in 1:k_clust){
temp_count <- c()
for (jj in 1:n_cancer_type){
temp_count <- c(temp_count, length(which(mutation_covariate_data$WHO_2022[which(cluster_results$clustermembership==ii)]==cancer_names[jj])))
}
cancer_table[ii,] <- temp_count
}
#mycolor2 <- c("#2a204f","#AA7744","#774411","#AA4455","#CC99BB","#ee7688dd",
#               "#771122","#DDCC77","#77CCCC","#114477","#4477AA",
#               "#77AADD","#AA4488","red3","#DDCC77","#777711","#AAAA44","lightblue","#44AA77",
#               "#88CCAA","#1122AA","#44AA00","#77CC77", "#771155","#AA4488","darkgrey")
library(viridis)
#mycolor2 <- c(plasma(11),"#202020",viridis(6))
mycolor2 <- c("#ee4455ff","#CC99BB", "#771122","#771155","#aa0066","#ee7688ff","#CC4477","#BB4455ff","#a03020",  "#CC4477","#441166","grey35","#117777","#88CCAA","#1177AA","darkblue","#77AADD","#117744")
p1_2022 <- ggbarplot(melt(cancer_table), "Var1", "value",
fill = "Var2", color = "Var2", palette = mycolor2,
label = TRUE, lab.col = NA)+
# label = TRUE, lab.col = "white", lab.pos = "in")+
xlab("Clusters") +
ylab("Number of Patients") +
# ylab("") +
theme(legend.key.size = unit(0.4, 'cm'),
legend.text = element_text(size=12)) +
guides(fill=guide_legend(title="Type (WHO2022)"),col = FALSE)+
theme(legend.position="right")
p1_2022
### BARPLOT ICC
k_clust <- length(levels(as.factor(cluster_results$clustermembership)))
n_cancer_type <- length(table(mutation_covariate_data$ICC))
cancer_table <- matrix(NA, k_clust, n_cancer_type)
cancer_names <- names(table(mutation_covariate_data$ICC))
colnames(cancer_table) <- cancer_names
rownames(cancer_table) <- LETTERS[1:k_clust]
for (ii in 1:k_clust){
temp_count <- c()
for (jj in 1:n_cancer_type){
temp_count <- c(temp_count, length(which(mutation_covariate_data$ICC[which(cluster_results$clustermembership==ii)]==cancer_names[jj])))
}
cancer_table[ii,] <- temp_count
}
# mycolor2 <- c("#2a204f","#AA7744","#774411","#AA4455","#CC99BB","#ee7688dd",
#               "#771122","#DDCC77","#77CCCC","#114477","#4477AA",
#               "#77AADD","#AA4488","lightblue","#DDCC77","#777711","#AAAA44","red3","#44AA77",
#               "#88CCAA","#1122AA","#44AA00","#77CC77", "#771155","#AA4488","darkgrey")
#mycolor2 <- c(plasma(9),"#202020",viridis(9))
mycolor2 <- c("#ee4455ff","#CC99BB", "#771122","#7500c0","#9900aa","#ee7688ff","#aa0066","#CC4477","#BB4455ff","#bb3020","#100000","grey35", "#88CCAA","#1177AA","darkblue","#77AADD","#119944", "#600050","#500077","#006608","#220077","red","blue", "yellow")
p1_icc <- ggbarplot(melt(cancer_table), "Var1", "value",
fill = "Var2", color = "Var2", palette = mycolor2,
label = TRUE, lab.col = NA)+
# label = TRUE, lab.col = "white", lab.pos = "in")+
xlab("Clusters") +
ylab("Number of Patients") +
theme(legend.key.size = unit(0.4, 'cm'),
legend.text = element_text(size=12)) +
# ylab("") +
guides(fill=guide_legend(title="Type (ICC)"),col = FALSE)+
theme(legend.position="right")
p1_icc
# Load classification by mutation profile (cluster assignment) # CLUSTERS
cluster_res <- readRDS("../results/euler_memberships_8k_9clusters.rds")
table(cluster_res$clustermembership)
mutation_covariate_data <- read.csv("../data/undivided_binary_matrix_6k.csv")
survdata <- read.csv("../data/diagCorrected_aml_mds_matrix_8k.csv")
survdata$clustermembership <- cluster_res$clustermembership
survdata$clustermembership <- as.factor(survdata$clustermembership)
levels(survdata$clustermembership) <- LETTERS[1:length(unique(cluster_res$clustermembership))]
survdata <- survdata[!survdata$ELN2022_IPSSM == "IPSSM_NA",]
survdata <- survdata[!survdata$IPSSR_ELN == "IPSSR_NA",]
### SANKEY
library(networkD3)
# Create a data frame with the two classification vectors
sankeydata <- data.frame(risk = survdata$ELN2022_IPSSM, sample_memberships = survdata$clustermembership)
sankeydata <- na.omit(sankeydata)
# Create a table with the frequency of each combination
links <- as.data.frame(table(sankeydata))
# Create a nodes data frame
nodes <- data.frame(name = unique(c(as.character(sankeydata$risk), as.character(sankeydata$sample_memberships))))
nodes$id <- 0:(nrow(nodes) - 1)
roworder <-c("ELN2022_adverse","ELN2022_intermediate","ELN2022_favorable","IPSSM_Very-High", "IPSSM_High", "IPSSM_Moderate-High","IPSSM_Moderate-Low","IPSSM_Low", "IPSSM_Very-Low",c(LETTERS[1:length(unique(cluster_res$clustermembership))]))
nodes <- nodes[match(roworder, nodes$name), ]
# Map the source and target values in the links data frame to the node IDs
links$Source <- c(match(links$risk, nodes$name) - 1)
links$Target <- c(match(links$sample_memberships, nodes$name) - 1)
links$Target <- match(links$sample_memberships, nodes$name) - 1
links <- links[links$Freq!=0,]
my_color <- 'd3.scaleOrdinal() .domain(["A", "B", "C","D","E","F","G","H","I","ELN2022_adverse","ELN2022_intermediate","ELN2022_favorable","IPSSM_Very-High", "IPSSM_High", "IPSSM_Moderate-High","IPSSM_Moderate-Low","IPSSM_Low", "IPSSM_Very-Low"]) .range(["#000000","#772266","#117777","#7c1a29","#114477","#cd9bbc","#88CCAA","#117744","#77AADD","#202020","#774411","#DDAA77","#440154", "#453581","#34618D","#24878E","#88CCAA","#77CC77"])'
#"A", "B", "C","D","E","F","G","H","I"
#"#000000","#774411","#DDAA77","#ed2124","#114477","#CC99BB","#88CCAA","#117744","#77AADD"
#"ELN2022_adverse","ELN2022_intermediate","ELN2022_favorable","IPSSM_Very-High", "IPSSM_High", "IPSSM_Moderate-High","IPSSM_Moderate-Low","IPSSM_Low", "IPSSM_Very-Low"
#"#202020","#774411","#DDAA77","#440154FF", "#453581FF","#34618DFF","#24878EFF","#88CCAA","#77CC77"
library("networkD3")
# Create a Sankey diagram
sankeyPlot <- sankeyNetwork(Links = links, Nodes = nodes, Source = "Source",
Target = "Target", Value = "Freq", NodeID = "name",
fontSize = 24, nodeWidth = 25, fontFamily = "sans-serif",
colourScale=my_color, iterations = 0, sinksRight = T)
# Display the Sankey diagram
#sankeyPlot
# you save it as an html
saveNetwork(sankeyPlot, "../results/sn.html")
library(webshot)
# you convert it as png
webshot("../results/sn.html","../figures/fig3a.png", vwidth = 900, vheight = 1500)
png(file = "../figures/fig3b.png", width = 1200, height = 2000, res = 150)
ggarrange(p1_2016, p1_2022, p1_icc,
ncol = 1, nrow = 3 ,
labels = letters[2:4], font.label = c(size=16))
dev.off()
library(graphClust)
library(scales)
library(ggplot2)
library(survival)
library(dplyr)
# Load required libraries
library(survival)
library(survminer)
# # Simulate binary data from 3 clusters
# k_clust <- 9
# all_data <- read.csv("../data/undivided_binary_matrix.csv")
#
# clustered_data <- all_data[,c(3:66,69:74)]
#
# # put age and sex in last row
# clustered_data[,c(1:64,67:70,65:66)]
# clustered_data$AGE <- clustered_data$AGE-1
#
# #store results
# cluster_res <- readRDS("../results/custer_res.rds")
# Prepare session, load packages
rm(list=ls())
library(survival)
library(RColorBrewer)
# Load classification by mutation profile (cluster assignment) # CLUSTERS
#cluster_res <- readRDS("../results/euler_memberships_final_9.rds")
# cluster_res <- readRDS("./results/euler_memberships_final_26.rds")
cluster_res <- readRDS("../results/euler_memberships_8k_9clusters.rds")
# remove this line in the future (after package update on euler)
# cluster_res$clustermembership <- cluster_res$clustermembership[[1]]
# cluster_res <- readRDS("../results/custer_res.rds")
table(cluster_res$clustermembership)
# mut_cov_data <- read.csv("../data/undivided_binary_matrix.csv")
# import survival data
survdata <- read.csv("../data/diagCorrected_aml_mds_matrix_8k.csv")
# survdata$last_fu <- as.Date(survdata$last_fu, format = "%d.%m.%Y")
# survdata$firstdiagnosis_date <- as.Date(survdata$firstdiagnosis_date, format = "%d.%m.%Y")
# survdata$relapse_date <- as.Date(survdata$relapse_date, format = "%d.%m.%Y")
# survdata$type <- as.factor(survdata$)
survdata$WHO_2016 <- as.factor(survdata$WHO_2016)
survdata$WHO_2022 <- as.factor(survdata$WHO_2022)
#survdata$IPSSR_ELN <- as.factor(survdata$IPSSR_ELN)
survdata$ICC <- as.factor(survdata$ICC)
survdata$Cluster <- cluster_res$clustermembership
survdata$Cluster <- as.factor(survdata$Cluster)
levels(survdata$Cluster) <- LETTERS[1:length(unique(survdata$Cluster))]
survdata <- survdata[grep("MDS/AML",survdata$ICC),]
p <- c()
for(i in unique(survdata$ICC)){
subdata <- survdata[survdata$ICC== i,]
group_count <- subdata %>%
group_by(Cluster) %>%
dplyr::summarise(n = n())
filtered_groups <- group_count %>%
filter(n >= 10) %>%
pull(Cluster)
# Create a new DataFrame containing only the rows where group appears 5 or more times
subdata <- subdata %>%
filter(Cluster %in% filtered_groups)
# merge clinical information and cluster membership
clinical <- list()
clinical$event <- c(subdata$OS_STATUS,subdata$OS_STATUS)
clinical$time <- c(subdata$OS,subdata$OS)
clinical$group <- c(subdata$ICC,subdata$Cluster)
clinical$type <- c(subdata$WHO_2016,subdata$WHO_2016)
# THESE NOW MATCH
length(clinical$group)
length(clinical$time)
table(clinical$group)
# Kaplan-Meier curve for groups
nb.cols <- length(unique(cluster_res$clustermembership))
#
#
colours_clusters <- c("blue", "#000000","#772266","#117777","#771122aa","#114477","#CC99BBcc","#88CCAA","#117744","#77AADD")
#plot(survfit(Surv(time = as.numeric(time), event = as.numeric(event)) ~ group, data = clinical), col=colourysdots, ylab='Survival probability', xlab='Survival (years)', mark.time = T)
#legend(x = 12.9, y = 1.0, legend = paste(levels(clinical$group), sep=' '), pch = 15, col=colourysdots, cex=1, ncol = 2,title="Cluster", bg='white')
os <- survfit(Surv(time = as.numeric(time), event = as.numeric(event)) ~ group, data = clinical)
library("survminer")
file<-paste0("../figures/Supp_",gsub("MDS/AML ", "MDSAML_",i),".png")
png(filename = file, width = 2300, height = 2000, res = 280)
p[i] <- ggsurvplot(
os,                     # survfit object with calculated statistics.
data = clinical,             # data used to fit survival curves.
#palette = colours_clusters,#colours_clusters, # personalized colours
palette = alpha(colours_clusters[c(1, c(seq(1:9)+1)[as.character(sort(unique(survdata$Cluster))) %in% unique(clinical$group)[grep(x = unique(clinical$group), pattern = i, invert = T)]])],c(1,rep(0.55, length(unique(subdata$Cluster))))),
# legend.labs = sort(as.character(unique(survdata$Cluster))),
risk.table = F,       # show risk table.
pval = T,             # show p-value of log-rank test.
conf.int = F,         # show confidence intervals for
# point estimates of survival curves.
xlim = c(0,10),         # was c(0,14.4)
# survival estimates.
xlab = "Time in years",   # customize X axis label.
break.time.by = 1,     # break X axis in time intervals by 500.
ggtheme = theme_light(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.fontsize = 3,
pval.size =4,
pval.coord = c(0, 0.15),
title= paste0("Overall Survival - ", gsub(pattern = "_", replacement = " ", i), " (n=",length(clinical$event)/2,")"),
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
print(p[i])
dev.off()
}
pdf(file = "../figures/Supplementary_MDS_AML_OS.pdf", width = 11, height = 10)
ggarrange(p$`MDS/AML MR-Cyto`,p$`MDS/AML MR-Gen`, p$`MDS/AML TP53`, p$`MDS/AML NOS`, ncol = 2, nrow = 2 , labels = letters[1:4])
dev.off()
#### PFS
library(graphClust)
library(scales)
library(ggplot2)
library(survival)
library(dplyr)
# Load required libraries
library(survival)
library(survminer)
# Prepare session, load packages
rm(list=ls())
library(survival)
library(RColorBrewer)
# Load classification by mutation profile (cluster assignment) # CLUSTERS
#cluster_res <- readRDS("../results/euler_memberships_final_9.rds")
# cluster_res <- readRDS("./results/euler_memberships_final_26.rds")
cluster_res <- readRDS("../results/euler_memberships_8k_9clusters.rds")
# remove this line in the future (after package update on euler)
# cluster_res$clustermembership <- cluster_res$clustermembership[[1]]
# cluster_res <- readRDS("../results/custer_res.rds")
table(cluster_res$clustermembership)
# mut_cov_data <- read.csv("../data/undivided_binary_matrix.csv")
# import survival data
survdata <- read.csv("../data/diagCorrected_aml_mds_matrix_8k.csv")
# survdata$last_fu <- as.Date(survdata$last_fu, format = "%d.%m.%Y")
# survdata$firstdiagnosis_date <- as.Date(survdata$firstdiagnosis_date, format = "%d.%m.%Y")
# survdata$relapse_date <- as.Date(survdata$relapse_date, format = "%d.%m.%Y")
# survdata$type <- as.factor(survdata$)
survdata$WHO_2016 <- as.factor(survdata$WHO_2016)
survdata$WHO_2022 <- as.factor(survdata$WHO_2022)
#survdata$IPSSR_ELN <- as.factor(survdata$IPSSR_ELN)
survdata$ELN2022_IPSSM <- as.factor(survdata$ELN2022_IPSSM)
survdata$Cluster <- cluster_res$clustermembership
survdata$Cluster <- as.factor(survdata$Cluster)
levels(survdata$Cluster) <- LETTERS[1:length(unique(survdata$Cluster))]
survdata <- survdata[!(survdata$ELN2022_IPSSM) %in% "IPSSM_NA",]
pfsdata <- read.delim("../data/IPSSM_df_clinical.tsv")
pfsdata <- pfsdata[, c("ID","AMLt_YEARS","AMLt_STATUS","LFS_YEARS","LFS_STATUS")]
survdata <- merge(survdata,pfsdata, by = "ID")
survdata$WHO_2016 <- as.factor(survdata$WHO_2016)
survdata$WHO_2022 <- as.factor(survdata$WHO_2022)
#survdata$IPSSR_ELN <- as.factor(survdata$IPSSR_ELN)
survdata$ICC <- as.factor(survdata$ICC)
levels(survdata$Cluster) <- LETTERS[1:length(unique(survdata$Cluster))]
survdata <- survdata[grep("MDS/AML",survdata$ICC),]
p <- c()
for(i in unique(survdata$ICC)){
subdata <- survdata[survdata$ICC== i,]
group_count <- subdata %>%
group_by(Cluster) %>%
dplyr::summarise(n = n())
filtered_groups <- group_count %>%
filter(n >= 10) %>%
pull(Cluster)
# Create a new DataFrame containing only the rows where group appears 5 or more times
subdata <- subdata %>%
filter(Cluster %in% filtered_groups)
# merge clinical information and cluster membership
clinical <- list()
clinical$event <- c(subdata$AMLt_STATUS,subdata$AMLt_STATUS)
clinical$time <- c(subdata$AMLt_YEARS,subdata$AMLt_YEARS)
clinical$group <- c(subdata$ICC,subdata$Cluster)
clinical$type <- c(subdata$WHO_2016,subdata$WHO_2016)
# THESE NOW MATCH
length(clinical$group)
length(clinical$time)
table(clinical$group)
# Kaplan-Meier curve for groups
nb.cols <- length(unique(cluster_res$clustermembership))
#
#
colours_clusters <- c("blue", "#000000","#772266","#117777","#771122aa","#114477","#CC99BBcc","#88CCAA","#117744","#77AADD")
#plot(survfit(Surv(time = as.numeric(time), event = as.numeric(event)) ~ group, data = clinical), col=colourysdots, ylab='Survival probability', xlab='Survival (years)', mark.time = T)
#legend(x = 12.9, y = 1.0, legend = paste(levels(clinical$group), sep=' '), pch = 15, col=colourysdots, cex=1, ncol = 2,title="Cluster", bg='white')
os <- survfit(Surv(time = as.numeric(time), event = as.numeric(event)) ~ group, data = clinical)
library("survminer")
file<-paste0("../figures/Supp_",gsub("MDS/AML ", "MDSAML_",i),".png")
png(filename = file, width = 2300, height = 2000, res = 280)
p[i] <- ggsurvplot(
os,                     # survfit object with calculated statistics.
data = clinical,             # data used to fit survival curves.
#palette = colours_clusters,#colours_clusters, # personalized colours
palette = alpha(colours_clusters[c(1, c(seq(1:9)+1)[as.character(sort(levels(survdata$Cluster))) %in% as.character(unique(clinical$group)[grep(x = unique(clinical$group), pattern = i, invert = T)])])], c(1,rep(0.55, length(unique(subdata$Cluster))))),
# legend.labs = sort(as.character(unique(survdata$Cluster))),
risk.table = F,       # show risk table.
pval = T,             # show p-value of log-rank test.
conf.int = F,         # show confidence intervals for
# point estimates of survival curves.
xlim = c(0,10),         # was c(0,14.4)
# survival estimates.
xlab = "Time in years",   # customize X axis label.
ylab = "Transformation probability",   # customize X axis label.
break.time.by = 1,     # break X axis in time intervals by 500.
ggtheme = theme_light(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.fontsize = 3,
pval.size =4,
title= paste0("Time to AML transformation - ", gsub(pattern = "_", replacement = " ", i), " (n=",length(clinical$event)/2,")"),
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
print(p[i])
dev.off()
}
pdf(file = "../figures/Supplementary_MDS_AML_AMLt.pdf", width = 11, height = 10)
ggarrange(p$`MDS/AML MR-Cyto`,p$`MDS/AML MR-Gen`, p$`MDS/AML TP53`, p$`MDS/AML NOS`, ncol = 2, nrow = 2 , labels = letters[1:4])
dev.off()
survdata
survdata$Cluster =="C"
survdata$WHO_2016[survdata$Cluster =="C"]
survdata$WHO_2016[survdata$Cluster =="C",]
survdata$WHO_2022[survdata$Cluster =="C"]
survdata$WHO_2016
library(graphClust)
library(scales)
library(ggplot2)
library(survival)
library(dplyr)
# Load required libraries
library(survival)
library(survminer)
# # Simulate binary data from 3 clusters
# k_clust <- 9
# all_data <- read.csv("../data/undivided_binary_matrix.csv")
#
# clustered_data <- all_data[,c(3:66,69:74)]
#
# # put age and sex in last row
# clustered_data[,c(1:64,67:70,65:66)]
# clustered_data$AGE <- clustered_data$AGE-1
#
# #store results
# cluster_res <- readRDS("../results/custer_res.rds")
# Prepare session, load packages
rm(list=ls())
library(survival)
library(RColorBrewer)
# Load classification by mutation profile (cluster assignment) # CLUSTERS
#cluster_res <- readRDS("../results/euler_memberships_final_9.rds")
# cluster_res <- readRDS("./results/euler_memberships_final_26.rds")
cluster_res <- readRDS("../results/euler_memberships_8k_9clusters.rds")
# remove this line in the future (after package update on euler)
# cluster_res$clustermembership <- cluster_res$clustermembership[[1]]
# cluster_res <- readRDS("../results/custer_res.rds")
table(cluster_res$clustermembership)
# mut_cov_data <- read.csv("../data/undivided_binary_matrix.csv")
# import survival data
survdata <- read.csv("../data/diagCorrected_aml_mds_matrix_8k.csv")
# survdata$last_fu <- as.Date(survdata$last_fu, format = "%d.%m.%Y")
# survdata$firstdiagnosis_date <- as.Date(survdata$firstdiagnosis_date, format = "%d.%m.%Y")
# survdata$relapse_date <- as.Date(survdata$relapse_date, format = "%d.%m.%Y")
# survdata$type <- as.factor(survdata$)
survdata$WHO_2016 <- as.factor(survdata$WHO_2016)
survdata$WHO_2022 <- as.factor(survdata$WHO_2022)
#survdata$IPSSR_ELN <- as.factor(survdata$IPSSR_ELN)
survdata$ICC <- as.factor(survdata$ICC)
survdata$Cluster <- cluster_res$clustermembership
survdata$Cluster <- as.factor(survdata$Cluster)
levels(survdata$Cluster) <- LETTERS[1:length(unique(survdata$Cluster))]
survdata <- survdata[grep("MDS/AML",survdata$ICC),]
survdata$WHO_2022[survdata$Cluster =="C"]
survdata
dim(survdata)
library(graphClust)
library(scales)
library(ggplot2)
library(survival)
library(dplyr)
# Load required libraries
library(survival)
library(survminer)
# # Simulate binary data from 3 clusters
# k_clust <- 9
# all_data <- read.csv("../data/undivided_binary_matrix.csv")
#
# clustered_data <- all_data[,c(3:66,69:74)]
#
# # put age and sex in last row
# clustered_data[,c(1:64,67:70,65:66)]
# clustered_data$AGE <- clustered_data$AGE-1
#
# #store results
# cluster_res <- readRDS("../results/custer_res.rds")
# Prepare session, load packages
rm(list=ls())
library(survival)
library(RColorBrewer)
# Load classification by mutation profile (cluster assignment) # CLUSTERS
#cluster_res <- readRDS("../results/euler_memberships_final_9.rds")
# cluster_res <- readRDS("./results/euler_memberships_final_26.rds")
cluster_res <- readRDS("../results/euler_memberships_8k_9clusters.rds")
# remove this line in the future (after package update on euler)
# cluster_res$clustermembership <- cluster_res$clustermembership[[1]]
# cluster_res <- readRDS("../results/custer_res.rds")
table(cluster_res$clustermembership)
# mut_cov_data <- read.csv("../data/undivided_binary_matrix.csv")
# import survival data
survdata <- read.csv("../data/diagCorrected_aml_mds_matrix_8k.csv")
# survdata$last_fu <- as.Date(survdata$last_fu, format = "%d.%m.%Y")
# survdata$firstdiagnosis_date <- as.Date(survdata$firstdiagnosis_date, format = "%d.%m.%Y")
# survdata$relapse_date <- as.Date(survdata$relapse_date, format = "%d.%m.%Y")
# survdata$type <- as.factor(survdata$)
survdata$WHO_2016 <- as.factor(survdata$WHO_2016)
survdata$WHO_2022 <- as.factor(survdata$WHO_2022)
#survdata$IPSSR_ELN <- as.factor(survdata$IPSSR_ELN)
survdata$ICC <- as.factor(survdata$ICC)
survdata$Cluster <- cluster_res$clustermembership
survdata$Cluster <- as.factor(survdata$Cluster)
dim(survdata)
survdata$WHO_2022[survdata$Cluster =="C"]
survdata$WHO_2022[survdata$Cluster =="C",]
survdata[survdata$Cluster =="C"]
survdata[survdata$Cluster =="C",]
survdata[survdata$Cluster ==3,]
survdata$WHO_2016[survdata$Cluster ==3,]
survdata$WHO_2016[survdata$Cluster ==3]
grep(pattern = "MDS", x=survdata$WHO_2016[survdata$Cluster ==2,])
grep(pattern = "MDS", x=survdata$WHO_2016[survdata$Cluster ==2])
length(grep(pattern = "MDS", x=survdata$WHO_2016[survdata$Cluster ==2]))
length(grep(pattern = "MDS", x=survdata$WHO_2016[survdata$Cluster ==4]))
length(grep(pattern = "MDS", x=survdata$WHO_2016[survdata$Cluster ==6]))
dim(survdata$WHO_2016[survdata$Cluster ==6])
length(survdata$WHO_2016[survdata$Cluster ==6])
length(survdata$WHO_2016[survdata$Cluster ==4])
length(survdata$WHO_2016[survdata$Cluster ==2])
39/922
242/545
322/380
