library(readr)
library(dplyr)
library(stringr)
library(devtools)
setwd("~/Documents/GitHub/diagchallenge/DiagChallenge/")
source("~/Documents/GitHub/diagchallenge/DiagChallenge/preprocessing/prepr_functions.R")
# patient with MDS that can become AML in the newer classifications: del(17)(q21), t(6;11)(q27;q23), t(3;21)(q26;q22), t(12;21)(q24;q22)
#load MDS dataset and create the cytogenetics colums
clin_mds <- read_tsv("./data/IPSSM_df_clinical.tsv")
clin_mds <- as.data.frame(clin_mds)
clin_mds <- clin_mds[!is.na(clin_mds$AMLt_STATUS),]
## COMMENT THE FOLLOWING LINE TO KEEP ALL THE PATIENTS (6K). The following line selects only MDS that transform into AML
#clin_mds <- clin_mds[clin_mds$AMLt_STATUS=="1",]
clin_mds <- parse_cytogenetics(clin_mds)
mut_mds <- read_tsv("./data/IPSSM_df_mut.tsv")
# Select rows in mut_mds with matching IDs from clin_mds
matched_rows <- mut_mds[mut_mds$ID %in% clin_mds$ID, ]
# Sort the matched_rows dataframe based on the order of IDs in clin_mds
mut_mds <- matched_rows[match(clin_mds$ID, matched_rows$ID), ]
#load AML dataset and
aml_ncri <- read_delim("./data/NCRI_paper_aml_prognosis_updated.tsv", delim = " ")
aml_nejm <- read_delim("./data/NEJM_validation.tsv", delim = " ")
aml_ncri$CEBPA <- aml_ncri$CEBPA_mono+aml_ncri$CEBPA_bi*2
aml_nejm$CEBPA <- aml_nejm$CEBPA_mono+aml_nejm$CEBPA_bi # the notation of the original file here is different!!
# aml_nejm$WHO_2016 <- "AML"
# aml_ncri$WHO_2016 <- "AML"
aml_ncri <- classify_aml2016_ncri(aml_ncri)
aml_nejm <- classify_aml2016_nejm(aml_nejm)
aml_ncri <- aml_ncri %>%
dplyr::mutate(IPSSR_ELN = dplyr::case_when(
eln_2017 == 3 ~ "ELN2017_favorable",
eln_2017 == 2 ~ "ELN2017_intermediate",
eln_2017 == 1 ~ "ELN2017_adverse",
TRUE ~ NA_character_
))
aml_nejm$IPSSR_ELN <- paste0("ELN2017_", aml_nejm$eln_2017)
clin_mds$IPSSR_ELN <- paste0("IPSSR_",clin_mds$IPSSR)
clin_mds$ELN2022_IPSSM <- paste0("IPSSM_",clin_mds$IPSSM)
aml_nejm$ELN2022_IPSSM <- rep(NA,dim(aml_nejm)[1])
aml_ncri$ELN2022_IPSSM <- rep(NA,dim(aml_ncri)[1])
clin_mds <- dplyr::arrange(clin_mds, ID)
mut_mds <- dplyr::arrange(mut_mds, ID)
mds_ipssm <- cbind(clin_mds,mut_mds)
colnames(mds_ipssm )[colnames(mds_ipssm) == "AGE"] <- "Age"
colnames(mds_ipssm )[colnames(mds_ipssm) == "SEX"] <- "Gender"
colnames(mds_ipssm)[colnames(mds_ipssm) == "BM_BLAST"] <- "BM_Blasts"
colnames(mds_ipssm)[colnames(mds_ipssm) == "OS_YEARS"] <- "OS"
colnames(mds_ipssm)[colnames(mds_ipssm) == "OS_STATUS"] <- "OS_Status"
names(aml_nejm) <- tolower(names(aml_nejm))
names(aml_ncri) <- tolower(names(aml_ncri))
names(mds_ipssm) <- tolower(names(mds_ipssm))
aml_ncri$flt3 <- as.integer(aml_ncri$itd | aml_ncri$flt3_tkd | aml_ncri$flt3_other)
aml_nejm$flt3 <- as.integer(aml_nejm$itd | aml_nejm$flt3_tkd | aml_nejm$flt3_other)
aml_ncri$idh2 <- as.integer(aml_ncri$idh2_p.r140 | aml_ncri$idh2_p.r172)
aml_ncri$nras <- as.integer(aml_ncri$nras_p.g12_13 | aml_ncri$nras_p.q61_62 | aml_ncri$nras_other)
aml_ncri$u2af1 <- as.integer(aml_ncri$u2af1_p.s34 | aml_ncri$u2af1_p.q157)
mut_mds$TP53 <- mut_mds$TP53multi*2 + mut_mds$TP53mono #account for TP53 mono- or bi-allelic mutation
# Find the common column names
common_columns <- intersect(names(aml_nejm), intersect(names(aml_ncri), names(mds_ipssm)))
# Subset the data frames to only include the common columns
df1_common <- aml_nejm[, common_columns]
df2_common <- aml_ncri[, common_columns]
df3_common <- mds_ipssm[, common_columns]
# Concatenate the data frames
df_combined <- rbind(df1_common, df2_common, df3_common)
df_combined <- calculate_risiko_ELN2022(df_combined)
studymatrix <- df_combined[,c(1:40,72,76,c(41:63),73,74,75,c(64:71))]
names(studymatrix)[1:42] <- toupper(names(studymatrix))[1:42]
names(studymatrix)[66:75] <- toupper(names(studymatrix))[66:75]
studymatrix <- classify_icc_who2022(studymatrix)
colnames(studymatrix)
studymatrix[studymatrix$GENDER=="1",70] <- "M"
studymatrix[studymatrix$GENDER=="0",70] <- "F"
colnames(studymatrix)[colnames(studymatrix) == "GENDER"] <- "SEX"
studymatrix <- studymatrix[,c(1:65,66,77,78,67,68:76)]
studymatrix
df_combined
df_combined$who_2016
table(df_combined$who_2016)
data.frame(table(df_combined$who_2016))
dim(df_combined)
studymatrix <- df_combined[,c(1:40,72,76,c(41:63),73,74,75,c(64:71))]
names(studymatrix)[1:42] <- toupper(names(studymatrix))[1:42]
names(studymatrix)[66:75] <- toupper(names(studymatrix))[66:75]
studymatrix <- classify_icc_who2022(studymatrix)
colnames(studymatrix)
studymatrix[studymatrix$GENDER=="1",70] <- "M"
studymatrix[studymatrix$GENDER=="0",70] <- "F"
colnames(studymatrix)[colnames(studymatrix) == "GENDER"] <- "SEX"
studymatrix <- studymatrix[,c(1:65,66,77,78,67,68:76)]
dim(studymatrix)
setwd("~/Documents/GitHub/diagchallenge/DiagChallenge/preprocessing")
library(readr)
library(dplyr)
library(stringr)
library(devtools)
setwd("~/Documents/GitHub/diagchallenge/DiagChallenge/")
source("~/Documents/GitHub/diagchallenge/DiagChallenge/preprocessing/prepr_functions.R")
# patient with MDS that can become AML in the newer classifications: del(17)(q21), t(6;11)(q27;q23), t(3;21)(q26;q22), t(12;21)(q24;q22)
#load MDS dataset and create the cytogenetics colums
clin_mds <- read_tsv("./data/IPSSM_df_clinical.tsv")
clin_mds <- as.data.frame(clin_mds)
clin_mds <- clin_mds[!is.na(clin_mds$AMLt_STATUS),]
## COMMENT THE FOLLOWING LINE TO KEEP ALL THE PATIENTS (6K). The following line selects only MDS that transform into AML
#clin_mds <- clin_mds[clin_mds$AMLt_STATUS=="1",]
clin_mds <- parse_cytogenetics(clin_mds)
mut_mds <- read_tsv("./data/IPSSM_df_mut.tsv")
# Select rows in mut_mds with matching IDs from clin_mds
matched_rows <- mut_mds[mut_mds$ID %in% clin_mds$ID, ]
# Sort the matched_rows dataframe based on the order of IDs in clin_mds
mut_mds <- matched_rows[match(clin_mds$ID, matched_rows$ID), ]
#load AML dataset and
aml_ncri <- read_delim("./data/NCRI_paper_aml_prognosis_updated.tsv", delim = " ")
aml_nejm <- read_delim("./data/NEJM_validation.tsv", delim = " ")
aml_ncri$CEBPA <- aml_ncri$CEBPA_mono+aml_ncri$CEBPA_bi*2
aml_nejm$CEBPA <- aml_nejm$CEBPA_mono+aml_nejm$CEBPA_bi # the notation of the original file here is different!!
# aml_nejm$WHO_2016 <- "AML"
# aml_ncri$WHO_2016 <- "AML"
aml_ncri <- classify_aml2016_ncri(aml_ncri)
aml_nejm <- classify_aml2016_nejm(aml_nejm)
aml_ncri <- aml_ncri %>%
dplyr::mutate(IPSSR_ELN = dplyr::case_when(
eln_2017 == 3 ~ "ELN2017_favorable",
eln_2017 == 2 ~ "ELN2017_intermediate",
eln_2017 == 1 ~ "ELN2017_adverse",
TRUE ~ NA_character_
))
aml_nejm$IPSSR_ELN <- paste0("ELN2017_", aml_nejm$eln_2017)
clin_mds$IPSSR_ELN <- paste0("IPSSR_",clin_mds$IPSSR)
clin_mds$ELN2022_IPSSM <- paste0("IPSSM_",clin_mds$IPSSM)
aml_nejm$ELN2022_IPSSM <- rep(NA,dim(aml_nejm)[1])
aml_ncri$ELN2022_IPSSM <- rep(NA,dim(aml_ncri)[1])
clin_mds <- dplyr::arrange(clin_mds, ID)
mut_mds <- dplyr::arrange(mut_mds, ID)
mds_ipssm <- cbind(clin_mds,mut_mds)
colnames(mds_ipssm )[colnames(mds_ipssm) == "AGE"] <- "Age"
colnames(mds_ipssm )[colnames(mds_ipssm) == "SEX"] <- "Gender"
colnames(mds_ipssm)[colnames(mds_ipssm) == "BM_BLAST"] <- "BM_Blasts"
colnames(mds_ipssm)[colnames(mds_ipssm) == "OS_YEARS"] <- "OS"
colnames(mds_ipssm)[colnames(mds_ipssm) == "OS_STATUS"] <- "OS_Status"
names(aml_nejm) <- tolower(names(aml_nejm))
names(aml_ncri) <- tolower(names(aml_ncri))
names(mds_ipssm) <- tolower(names(mds_ipssm))
aml_ncri$flt3 <- as.integer(aml_ncri$itd | aml_ncri$flt3_tkd | aml_ncri$flt3_other)
aml_nejm$flt3 <- as.integer(aml_nejm$itd | aml_nejm$flt3_tkd | aml_nejm$flt3_other)
aml_ncri$idh2 <- as.integer(aml_ncri$idh2_p.r140 | aml_ncri$idh2_p.r172)
aml_ncri$nras <- as.integer(aml_ncri$nras_p.g12_13 | aml_ncri$nras_p.q61_62 | aml_ncri$nras_other)
aml_ncri$u2af1 <- as.integer(aml_ncri$u2af1_p.s34 | aml_ncri$u2af1_p.q157)
mut_mds$TP53 <- mut_mds$TP53multi*2 + mut_mds$TP53mono #account for TP53 mono- or bi-allelic mutation
# Find the common column names
common_columns <- intersect(names(aml_nejm), intersect(names(aml_ncri), names(mds_ipssm)))
# Subset the data frames to only include the common columns
df1_common <- aml_nejm[, common_columns]
df2_common <- aml_ncri[, common_columns]
df3_common <- mds_ipssm[, common_columns]
# Concatenate the data frames
df_combined <- rbind(df1_common, df2_common, df3_common)
df_combined <- calculate_risiko_ELN2022(df_combined)
studymatrix <- df_combined[,c(1:40,72,76,c(41:63),73,74,75,c(64:71))]
names(studymatrix)[1:42] <- toupper(names(studymatrix))[1:42]
names(studymatrix)[66:75] <- toupper(names(studymatrix))[66:75]
studymatrix <- classify_icc_who2022(studymatrix)
colnames(studymatrix)
studymatrix[studymatrix$GENDER=="1",70] <- "M"
studymatrix[studymatrix$GENDER=="0",70] <- "F"
colnames(studymatrix)[colnames(studymatrix) == "GENDER"] <- "SEX"
studymatrix <- studymatrix[,c(1:65,66,77,78,67,68:76)]
dim(studymatrix)
library(readr)
library(dplyr)
library(stringr)
library(devtools)
setwd("~/Documents/GitHub/diagchallenge/DiagChallenge/")
source("~/Documents/GitHub/diagchallenge/DiagChallenge/preprocessing/prepr_functions.R")
# patient with MDS that can become AML in the newer classifications: del(17)(q21), t(6;11)(q27;q23), t(3;21)(q26;q22), t(12;21)(q24;q22)
#load MDS dataset and create the cytogenetics colums
clin_mds <- read_tsv("./data/IPSSM_df_clinical.tsv")
clin_mds <- as.data.frame(clin_mds)
clin_mds <- clin_mds[!is.na(clin_mds$AMLt_STATUS),]
## COMMENT THE FOLLOWING LINE TO KEEP ALL THE PATIENTS (6K). The following line selects only MDS that transform into AML
clin_mds <- clin_mds[clin_mds$AMLt_STATUS=="1",]
clin_mds <- parse_cytogenetics(clin_mds)
mut_mds <- read_tsv("./data/IPSSM_df_mut.tsv")
# Select rows in mut_mds with matching IDs from clin_mds
matched_rows <- mut_mds[mut_mds$ID %in% clin_mds$ID, ]
# Sort the matched_rows dataframe based on the order of IDs in clin_mds
mut_mds <- matched_rows[match(clin_mds$ID, matched_rows$ID), ]
#load AML dataset and
aml_ncri <- read_delim("./data/NCRI_paper_aml_prognosis_updated.tsv", delim = " ")
aml_nejm <- read_delim("./data/NEJM_validation.tsv", delim = " ")
aml_ncri$CEBPA <- aml_ncri$CEBPA_mono+aml_ncri$CEBPA_bi*2
aml_nejm$CEBPA <- aml_nejm$CEBPA_mono+aml_nejm$CEBPA_bi # the notation of the original file here is different!!
# aml_nejm$WHO_2016 <- "AML"
# aml_ncri$WHO_2016 <- "AML"
aml_ncri <- classify_aml2016_ncri(aml_ncri)
aml_nejm <- classify_aml2016_nejm(aml_nejm)
aml_ncri <- aml_ncri %>%
dplyr::mutate(IPSSR_ELN = dplyr::case_when(
eln_2017 == 3 ~ "ELN2017_favorable",
eln_2017 == 2 ~ "ELN2017_intermediate",
eln_2017 == 1 ~ "ELN2017_adverse",
TRUE ~ NA_character_
))
aml_nejm$IPSSR_ELN <- paste0("ELN2017_", aml_nejm$eln_2017)
clin_mds$IPSSR_ELN <- paste0("IPSSR_",clin_mds$IPSSR)
clin_mds$ELN2022_IPSSM <- paste0("IPSSM_",clin_mds$IPSSM)
aml_nejm$ELN2022_IPSSM <- rep(NA,dim(aml_nejm)[1])
aml_ncri$ELN2022_IPSSM <- rep(NA,dim(aml_ncri)[1])
clin_mds <- dplyr::arrange(clin_mds, ID)
mut_mds <- dplyr::arrange(mut_mds, ID)
mds_ipssm <- cbind(clin_mds,mut_mds)
colnames(mds_ipssm )[colnames(mds_ipssm) == "AGE"] <- "Age"
colnames(mds_ipssm )[colnames(mds_ipssm) == "SEX"] <- "Gender"
colnames(mds_ipssm)[colnames(mds_ipssm) == "BM_BLAST"] <- "BM_Blasts"
colnames(mds_ipssm)[colnames(mds_ipssm) == "OS_YEARS"] <- "OS"
colnames(mds_ipssm)[colnames(mds_ipssm) == "OS_STATUS"] <- "OS_Status"
names(aml_nejm) <- tolower(names(aml_nejm))
names(aml_ncri) <- tolower(names(aml_ncri))
names(mds_ipssm) <- tolower(names(mds_ipssm))
aml_ncri$flt3 <- as.integer(aml_ncri$itd | aml_ncri$flt3_tkd | aml_ncri$flt3_other)
aml_nejm$flt3 <- as.integer(aml_nejm$itd | aml_nejm$flt3_tkd | aml_nejm$flt3_other)
aml_ncri$idh2 <- as.integer(aml_ncri$idh2_p.r140 | aml_ncri$idh2_p.r172)
aml_ncri$nras <- as.integer(aml_ncri$nras_p.g12_13 | aml_ncri$nras_p.q61_62 | aml_ncri$nras_other)
aml_ncri$u2af1 <- as.integer(aml_ncri$u2af1_p.s34 | aml_ncri$u2af1_p.q157)
mut_mds$TP53 <- mut_mds$TP53multi*2 + mut_mds$TP53mono #account for TP53 mono- or bi-allelic mutation
# Find the common column names
common_columns <- intersect(names(aml_nejm), intersect(names(aml_ncri), names(mds_ipssm)))
# Subset the data frames to only include the common columns
df1_common <- aml_nejm[, common_columns]
df2_common <- aml_ncri[, common_columns]
df3_common <- mds_ipssm[, common_columns]
# Concatenate the data frames
df_combined <- rbind(df1_common, df2_common, df3_common)
df_combined <- calculate_risiko_ELN2022(df_combined)
studymatrix <- df_combined[,c(1:40,72,76,c(41:63),73,74,75,c(64:71))]
names(studymatrix)[1:42] <- toupper(names(studymatrix))[1:42]
names(studymatrix)[66:75] <- toupper(names(studymatrix))[66:75]
studymatrix <- classify_icc_who2022(studymatrix)
colnames(studymatrix)
studymatrix[studymatrix$GENDER=="1",70] <- "M"
studymatrix[studymatrix$GENDER=="0",70] <- "F"
colnames(studymatrix)[colnames(studymatrix) == "GENDER"] <- "SEX"
studymatrix <- studymatrix[,c(1:65,66,77,78,67,68:76)]
dim(studymatrix)
library(readr)
library(dplyr)
library(stringr)
library(devtools)
setwd("~/Documents/GitHub/diagchallenge/DiagChallenge/")
source("~/Documents/GitHub/diagchallenge/DiagChallenge/preprocessing/prepr_functions.R")
# patient with MDS that can become AML in the newer classifications: del(17)(q21), t(6;11)(q27;q23), t(3;21)(q26;q22), t(12;21)(q24;q22)
#load MDS dataset and create the cytogenetics colums
clin_mds <- read_tsv("./data/IPSSM_df_clinical.tsv")
clin_mds <- as.data.frame(clin_mds)
clin_mds <- clin_mds[!is.na(clin_mds$AMLt_STATUS),]
## COMMENT THE FOLLOWING LINE TO KEEP ALL THE PATIENTS (6K). The following line selects only MDS that transform into AML
#clin_mds <- clin_mds[clin_mds$AMLt_STATUS=="1",]
clin_mds <- parse_cytogenetics(clin_mds)
mut_mds <- read_tsv("./data/IPSSM_df_mut.tsv")
# Select rows in mut_mds with matching IDs from clin_mds
matched_rows <- mut_mds[mut_mds$ID %in% clin_mds$ID, ]
# Sort the matched_rows dataframe based on the order of IDs in clin_mds
mut_mds <- matched_rows[match(clin_mds$ID, matched_rows$ID), ]
#load AML dataset and
aml_ncri <- read_delim("./data/NCRI_paper_aml_prognosis_updated.tsv", delim = " ")
aml_nejm <- read_delim("./data/NEJM_validation.tsv", delim = " ")
aml_ncri$CEBPA <- aml_ncri$CEBPA_mono+aml_ncri$CEBPA_bi*2
aml_nejm$CEBPA <- aml_nejm$CEBPA_mono+aml_nejm$CEBPA_bi # the notation of the original file here is different!!
# aml_nejm$WHO_2016 <- "AML"
# aml_ncri$WHO_2016 <- "AML"
aml_ncri <- classify_aml2016_ncri(aml_ncri)
aml_nejm <- classify_aml2016_nejm(aml_nejm)
aml_ncri <- aml_ncri %>%
dplyr::mutate(IPSSR_ELN = dplyr::case_when(
eln_2017 == 3 ~ "ELN2017_favorable",
eln_2017 == 2 ~ "ELN2017_intermediate",
eln_2017 == 1 ~ "ELN2017_adverse",
TRUE ~ NA_character_
))
aml_nejm$IPSSR_ELN <- paste0("ELN2017_", aml_nejm$eln_2017)
clin_mds$IPSSR_ELN <- paste0("IPSSR_",clin_mds$IPSSR)
clin_mds$ELN2022_IPSSM <- paste0("IPSSM_",clin_mds$IPSSM)
aml_nejm$ELN2022_IPSSM <- rep(NA,dim(aml_nejm)[1])
aml_ncri$ELN2022_IPSSM <- rep(NA,dim(aml_ncri)[1])
clin_mds <- dplyr::arrange(clin_mds, ID)
mut_mds <- dplyr::arrange(mut_mds, ID)
mds_ipssm <- cbind(clin_mds,mut_mds)
colnames(mds_ipssm )[colnames(mds_ipssm) == "AGE"] <- "Age"
colnames(mds_ipssm )[colnames(mds_ipssm) == "SEX"] <- "Gender"
colnames(mds_ipssm)[colnames(mds_ipssm) == "BM_BLAST"] <- "BM_Blasts"
colnames(mds_ipssm)[colnames(mds_ipssm) == "OS_YEARS"] <- "OS"
colnames(mds_ipssm)[colnames(mds_ipssm) == "OS_STATUS"] <- "OS_Status"
names(aml_nejm) <- tolower(names(aml_nejm))
names(aml_ncri) <- tolower(names(aml_ncri))
names(mds_ipssm) <- tolower(names(mds_ipssm))
aml_ncri$flt3 <- as.integer(aml_ncri$itd | aml_ncri$flt3_tkd | aml_ncri$flt3_other)
aml_nejm$flt3 <- as.integer(aml_nejm$itd | aml_nejm$flt3_tkd | aml_nejm$flt3_other)
aml_ncri$idh2 <- as.integer(aml_ncri$idh2_p.r140 | aml_ncri$idh2_p.r172)
aml_ncri$nras <- as.integer(aml_ncri$nras_p.g12_13 | aml_ncri$nras_p.q61_62 | aml_ncri$nras_other)
aml_ncri$u2af1 <- as.integer(aml_ncri$u2af1_p.s34 | aml_ncri$u2af1_p.q157)
mut_mds$TP53 <- mut_mds$TP53multi*2 + mut_mds$TP53mono #account for TP53 mono- or bi-allelic mutation
# Find the common column names
common_columns <- intersect(names(aml_nejm), intersect(names(aml_ncri), names(mds_ipssm)))
# Subset the data frames to only include the common columns
df1_common <- aml_nejm[, common_columns]
df2_common <- aml_ncri[, common_columns]
df3_common <- mds_ipssm[, common_columns]
# Concatenate the data frames
df_combined <- rbind(df1_common, df2_common, df3_common)
df_combined <- calculate_risiko_ELN2022(df_combined)
studymatrix <- df_combined[,c(1:40,72,76,c(41:63),73,74,75,c(64:71))]
names(studymatrix)[1:42] <- toupper(names(studymatrix))[1:42]
names(studymatrix)[66:75] <- toupper(names(studymatrix))[66:75]
studymatrix <- classify_icc_who2022(studymatrix)
colnames(studymatrix)
studymatrix[studymatrix$GENDER=="1",70] <- "M"
studymatrix[studymatrix$GENDER=="0",70] <- "F"
colnames(studymatrix)[colnames(studymatrix) == "GENDER"] <- "SEX"
studymatrix <- studymatrix[,c(1:65,66,77,78,67,68:76)]
dim(studymatrix)
library(readr)
library(dplyr)
library(stringr)
library(devtools)
setwd("~/Documents/GitHub/diagchallenge/DiagChallenge/")
source("~/Documents/GitHub/diagchallenge/DiagChallenge/preprocessing/prepr_functions.R")
# patient with MDS that can become AML in the newer classifications: del(17)(q21), t(6;11)(q27;q23), t(3;21)(q26;q22), t(12;21)(q24;q22)
#load MDS dataset and create the cytogenetics colums
clin_mds <- read_tsv("./data/IPSSM_df_clinical.tsv")
clin_mds <- as.data.frame(clin_mds)
clin_mds <- clin_mds[!is.na(clin_mds$AMLt_STATUS),]
## COMMENT THE FOLLOWING LINE TO KEEP ALL THE PATIENTS (6K). The following line selects only MDS that transform into AML
clin_mds <- clin_mds[clin_mds$AMLt_STATUS=="1",]
clin_mds <- parse_cytogenetics(clin_mds)
mut_mds <- read_tsv("./data/IPSSM_df_mut.tsv")
# Select rows in mut_mds with matching IDs from clin_mds
matched_rows <- mut_mds[mut_mds$ID %in% clin_mds$ID, ]
# Sort the matched_rows dataframe based on the order of IDs in clin_mds
mut_mds <- matched_rows[match(clin_mds$ID, matched_rows$ID), ]
#load AML dataset and
aml_ncri <- read_delim("./data/NCRI_paper_aml_prognosis_updated.tsv", delim = " ")
aml_nejm <- read_delim("./data/NEJM_validation.tsv", delim = " ")
aml_ncri$CEBPA <- aml_ncri$CEBPA_mono+aml_ncri$CEBPA_bi*2
aml_nejm$CEBPA <- aml_nejm$CEBPA_mono+aml_nejm$CEBPA_bi # the notation of the original file here is different!!
# aml_nejm$WHO_2016 <- "AML"
# aml_ncri$WHO_2016 <- "AML"
aml_ncri <- classify_aml2016_ncri(aml_ncri)
aml_nejm <- classify_aml2016_nejm(aml_nejm)
aml_ncri <- aml_ncri %>%
dplyr::mutate(IPSSR_ELN = dplyr::case_when(
eln_2017 == 3 ~ "ELN2017_favorable",
eln_2017 == 2 ~ "ELN2017_intermediate",
eln_2017 == 1 ~ "ELN2017_adverse",
TRUE ~ NA_character_
))
aml_nejm$IPSSR_ELN <- paste0("ELN2017_", aml_nejm$eln_2017)
clin_mds$IPSSR_ELN <- paste0("IPSSR_",clin_mds$IPSSR)
clin_mds$ELN2022_IPSSM <- paste0("IPSSM_",clin_mds$IPSSM)
aml_nejm$ELN2022_IPSSM <- rep(NA,dim(aml_nejm)[1])
aml_ncri$ELN2022_IPSSM <- rep(NA,dim(aml_ncri)[1])
clin_mds <- dplyr::arrange(clin_mds, ID)
mut_mds <- dplyr::arrange(mut_mds, ID)
mds_ipssm <- cbind(clin_mds,mut_mds)
colnames(mds_ipssm )[colnames(mds_ipssm) == "AGE"] <- "Age"
colnames(mds_ipssm )[colnames(mds_ipssm) == "SEX"] <- "Gender"
colnames(mds_ipssm)[colnames(mds_ipssm) == "BM_BLAST"] <- "BM_Blasts"
colnames(mds_ipssm)[colnames(mds_ipssm) == "OS_YEARS"] <- "OS"
colnames(mds_ipssm)[colnames(mds_ipssm) == "OS_STATUS"] <- "OS_Status"
names(aml_nejm) <- tolower(names(aml_nejm))
names(aml_ncri) <- tolower(names(aml_ncri))
names(mds_ipssm) <- tolower(names(mds_ipssm))
aml_ncri$flt3 <- as.integer(aml_ncri$itd | aml_ncri$flt3_tkd | aml_ncri$flt3_other)
aml_nejm$flt3 <- as.integer(aml_nejm$itd | aml_nejm$flt3_tkd | aml_nejm$flt3_other)
aml_ncri$idh2 <- as.integer(aml_ncri$idh2_p.r140 | aml_ncri$idh2_p.r172)
aml_ncri$nras <- as.integer(aml_ncri$nras_p.g12_13 | aml_ncri$nras_p.q61_62 | aml_ncri$nras_other)
aml_ncri$u2af1 <- as.integer(aml_ncri$u2af1_p.s34 | aml_ncri$u2af1_p.q157)
mut_mds$TP53 <- mut_mds$TP53multi*2 + mut_mds$TP53mono #account for TP53 mono- or bi-allelic mutation
# Find the common column names
common_columns <- intersect(names(aml_nejm), intersect(names(aml_ncri), names(mds_ipssm)))
# Subset the data frames to only include the common columns
df1_common <- aml_nejm[, common_columns]
df2_common <- aml_ncri[, common_columns]
df3_common <- mds_ipssm[, common_columns]
# Concatenate the data frames
df_combined <- rbind(df1_common, df2_common, df3_common)
df_combined <- calculate_risiko_ELN2022(df_combined)
studymatrix <- df_combined[,c(1:40,72,76,c(41:63),73,74,75,c(64:71))]
names(studymatrix)[1:42] <- toupper(names(studymatrix))[1:42]
names(studymatrix)[66:75] <- toupper(names(studymatrix))[66:75]
studymatrix <- classify_icc_who2022(studymatrix)
colnames(studymatrix)
studymatrix[studymatrix$GENDER=="1",70] <- "M"
studymatrix[studymatrix$GENDER=="0",70] <- "F"
colnames(studymatrix)[colnames(studymatrix) == "GENDER"] <- "SEX"
studymatrix <- studymatrix[,c(1:65,66,77,78,67,68:76)]
dim(studymatrix)
# load data
input_data <- read.csv("./data/aml_mds_matrix_6k.csv",header = T)
dim(input_data)
# load data
input_data <- read.csv("./data/aml_mds_matrix_4k.csv",header = T)
dim(input_data)
