library(GenomicRanges)
library(ggplot2)
library(Rsamtools)
library(readr)
library(maftools)
library(DPClust)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rsamtools")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("readr")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("QDNAseq")
install.packages("cghRA")
source("http://bioconductor.org/biocLite.R"); biocLite(c("optparse","KernSmooth","ks","lattice","ggplot2","gridExtra"))
source("http://bioconductor.org/biocLite.R"); biocLite(c("optparse","VariantAnnotation","GenomicRanges","Rsamtools","ggplot2","IRanges","S4Vectors","reshape2"))'
devtools::install_github("Wedge-Oxford/dpclust3p")
devtools::install_github("Wedge-Oxford/dpclust3p")
install.packages("devtools")
devtools::install_github("Wedge-Oxford/dpclust3p")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
source("http://bioconductor.org/biocLite.R"); biocLite(c("optparse","VariantAnnotation","GenomicRanges","Rsamtools","ggplot2","IRanges","S4Vectors","reshape2"))'
BiocManager::install(c("VariantAnnotation","optparse","GenomicRanges","Rsamtools","ggplot2","IRanges","S4Vectors","reshape2"))
devtools::install_github("Wedge-Oxford/dpclust3p")
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS"=TRUE)
devtools::install_github("Wedge-Oxford/dpclust3p")
#install/load packages needed
packages <- c("xlsx", "gdata", "plyr", "png", "data.table")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
lapply(packages, require, character.only=T)
confronti.multipli <- function(mut.file, path, out.file, contr=c("GL", "TUM")){
contro <- pmatch(contr, c("GL", "TUM"))
if(is.na(contro)) {
#img <- readPNG("S:\\GL_Rossi\\Common\\R_SCRIPT\\ConfrontiMultipli\\imagelodo.png")
#grid::grid.raster(img)
#stop('Ahia, anvedi che machinata che me so pijato! Riprova con GL o TUM')
}
library(data.table)
path <- path
filenames <- list.files(path, pattern = ".txt")
filenames
mut <<- fread(mut.file, header = T)
n=ncol(mut)
if (contr == "GL"){
for (j in filenames){
#print(filenames)
print(j)
confr <<- fread(paste(path, j, sep=""), sep="\t", header=T)
#confr$var[confr$var == ""] <- "A"
mut <- merge(mut, confr[,c("chrom", "position", "ref_new", "var_new", "tumor_var_freq")], by.x=c("chrom", "position", "ref_new", "var_new"), by.y=c("chrom", "position", "ref_new", "var_new"), all.x=T)
mut <- join(mut, confr[,c("chrom", "position", "ref_new", "var_new", "normal_var_freq")], by=c("chrom", "position", "ref_new", "var_new"))
colnames(mut)[ncol(mut)] <- strsplit(as.character(j), "\\.")[[1]][1]
}
}
else if (contr == "TUM"){
for (j in filenames){
print(j)
#print(filenames)
confr <<- fread(paste(path, j, sep=""), sep="\t", header=T)
mut <- join(mut, confr[,c("chrom", "position", "ref_new", "var_new", "tumor_var_freq")], by=c("chrom", "position", "ref_new", "var_new"))
colnames(mut)[ncol(mut)] <- strsplit(as.character(j), "\\.")[[1]][1]
}
}
mut[,(n+1):ncol(mut)][is.na(mut[,(n+1):ncol(mut)])] <- 0
#colnames(mut)[c((n+1):ncol(mut))] <- filenames
write.csv(mut, out.file, dec=".", sep = ",", row.names = F)
}
#options(java.parameters = "-Xmx2048m")
confronti.multipli("~/Desktop/redo/redo/samples_rerun.csv",                               #input mutation file (excel)
"/Volumes/MEMORIA/Belli_DATA/PL/",                                                            #path to txt files to compare
"~/Desktop/redo/redo/rerun_multipli.csv",             #output file (csv)
"TUM")
#install/load packages needed
packages <- c("xlsx", "gdata", "plyr", "png", "data.table")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
lapply(packages, require, character.only=T)
##function below##
#NOTE GENERALI
#Trasformare excel in .txt
#Se non si fa il match per 'var' si puo osservare una vaf!=0 per un altro cambio nucleotidico
#Mettere un k e aumentarlo a ogni iteration aumenta di molto il tempo della funzione
#DA FARE
#Si potrebbe mettere IF nella funzione con %in% per eliminare un input
#Problema se colonna chiamata con un nome diverso dal normale
confronti.multipli <- function(mut.file, path, out.file, contr=c("GL", "TUM")){
contro <- pmatch(contr, c("GL", "TUM"))
if(is.na(contro)) {
#img <- readPNG("S:\\GL_Rossi\\Common\\R_SCRIPT\\ConfrontiMultipli\\imagelodo.png")
#grid::grid.raster(img)
#stop('Ahia, anvedi che machinata che me so pijato! Riprova con GL o TUM')
}
library(data.table)
path <- path
filenames <- list.files(path, pattern = ".txt")
filenames
mut <<- fread(mut.file, header = T)
n=ncol(mut)
if (contr == "GL"){
for (j in filenames){
#print(filenames)
print(j)
confr <<- fread(paste(path, j, sep=""), sep="\t", header=T)
#confr$var[confr$var == ""] <- "A"
mut <- merge(mut, confr[,c("chrom", "position", "ref_new", "var_new", "tumor_var_freq")], by.x=c("chrom", "position", "ref_new", "var_new"), by.y=c("chrom", "position", "ref_new", "var_new"), all.x=T)
mut <- join(mut, confr[,c("chrom", "position", "ref_new", "var_new", "normal_var_freq")], by=c("chrom", "position", "ref_new", "var_new"))
colnames(mut)[ncol(mut)] <- strsplit(as.character(j), "\\.")[[1]][1]
}
}
else if (contr == "TUM"){
for (j in filenames){
print(j)
#print(filenames)
confr <<- fread(paste(path, j, sep=""), sep="\t", header=T)
mut <- join(mut, confr[,c("chrom", "position", "ref_new", "var_new", "tumor_var_freq")], by=c("chrom", "position", "ref_new", "var_new"))
colnames(mut)[ncol(mut)] <- strsplit(as.character(j), "\\.")[[1]][1]
}
}
mut[,(n+1):ncol(mut)][is.na(mut[,(n+1):ncol(mut)])] <- 0
#colnames(mut)[c((n+1):ncol(mut))] <- filenames
write.csv(mut, out.file, dec=".", sep = ",", row.names = F)
}
#options(java.parameters = "-Xmx2048m")
confronti.multipli("~/Desktop/csv_27lug/run5.csv",                               #input mutation file (excel)
"/Volumes/MEMORIA/Belli_DATA/PL/",                                                            #path to txt files to compare
"~/Desktop/redo/redo/rerun_multipli.csv",             #output file (csv)
"TUM")
#options(java.parameters = "-Xmx2048m")
confronti.multipli("~/Desktop/csv_27lug/run5.csv",                               #input mutation file (excel)
"/Volumes/MEMORIA/Belli_DATA/PL/",                                                            #path to txt files to compare
"~/Desktop/csv_27lug/run5_multipli.csv",             #output file (csv)
"TUM")
setwd("~/Desktop/validation/")
library(Canopy)
library(scatterplot3d)
data(AML43)
R=AML43$R; X=AML43$X
dim(R);dim(X)
R
head(R)
head(X)
AML43
for(i in 1:dim(t1_t2_t3C@clust$cluster.means)[2])
)
dim(t1_t2_t3C@clust$cluster.means)[2]
library(facets)
remotes::install_github("mskcc/pctGCdata")
remotes::install_github("mskcc/facets")
p.adjust(0.05, method= "holm", n=370000)
test <- rep(0.05, 370000)
test
p.adjust(test, method= "holm", n=length(test))
#install/load packages needed
packages <- c("xlsx", "gdata", "plyr", "png", "data.table")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
lapply(packages, require, character.only=T)
confronti.multipli <- function(mut.file, path, out.file, contr=c("GL", "TUM")){
contro <- pmatch(contr, c("GL", "TUM"))
if(is.na(contro)) {
#img <- readPNG("S:\\GL_Rossi\\Common\\R_SCRIPT\\ConfrontiMultipli\\imagelodo.png")
#grid::grid.raster(img)
#stop('Ahia, anvedi che machinata che me so pijato! Riprova con GL o TUM')
}
library(data.table)
path <- path
filenames <- list.files(path, pattern = ".txt")
filenames
mut <<- fread(mut.file, header = T)
n=ncol(mut)
if (contr == "GL"){
for (j in filenames){
#print(filenames)
print(j)
confr <<- fread(paste(path, j, sep=""), sep="\t", header=T)
#confr$var[confr$var == ""] <- "A"
mut <- merge(mut, confr[,c("chrom", "position", "ref_new", "var_new", "tumor_var_freq")], by.x=c("chrom", "position", "ref_new", "var_new"), by.y=c("chrom", "position", "ref_new", "var_new"), all.x=T)
mut <- join(mut, confr[,c("chrom", "position", "ref_new", "var_new", "normal_var_freq")], by=c("chrom", "position", "ref_new", "var_new"))
colnames(mut)[ncol(mut)] <- strsplit(as.character(j), "\\.")[[1]][1]
}
}
else if (contr == "TUM"){
for (j in filenames){
print(j)
#print(filenames)
confr <<- fread(paste(path, j, sep=""), sep="\t", header=T)
mut <- join(mut, confr[,c("chrom", "position", "ref_new", "var_new", "tumor_var_freq")], by=c("chrom", "position", "ref_new", "var_new"))
colnames(mut)[ncol(mut)] <- strsplit(as.character(j), "\\.")[[1]][1]
}
}
mut[,(n+1):ncol(mut)][is.na(mut[,(n+1):ncol(mut)])] <- 0
#colnames(mut)[c((n+1):ncol(mut))] <- filenames
write.csv(mut, out.file, dec=".", sep = ",", row.names = F)
}
#options(java.parameters = "-Xmx2048m")
confronti.multipli("~/Desktop/ETH/ctDNA/run2/run2.csv",                               #input mutation file (excel)
"/Volumes/MEMORIA/Belli_DATA/PL/",                                                            #path to txt files to compare
"~/Desktop/ETH/ctDNA/run2/run2.final.csv",             #output file (csv)
"TUM")
#options(java.parameters = "-Xmx2048m")
confronti.multipli("~/Desktop/ETH/ctDNA/run2_redo150/run2_redo150.csv",                               #input mutation file (excel)
"/Volumes/MEMORIA/Belli_DATA/PL/",                                                            #path to txt files to compare
"~/Desktop/ETH/ctDNA/run2_redo150/run2_redo150.final.csv",             #output file (csv)
"TUM")
#options(java.parameters = "-Xmx2048m")
confronti.multipli("~/Desktop/ETH/ctDNA/run2replicate_dec2022/run2replicate_dec2022.csv",                               #input mutation file (excel)
"/Volumes/MEMORIA/Belli_DATA/PL/",                                                            #path to txt files to compare
"~/Desktop/ETH/ctDNA/run2replicate_dec2022//run2replicate_dec2022.final.csv",             #output file (csv)
"TUM")
#options(java.parameters = "-Xmx2048m")
confronti.multipli("~/Desktop/ETH/ctDNA/run7/run7.csv",                               #input mutation file (excel)
"/Volumes/MEMORIA/Belli_DATA/PL/",                                                            #path to txt files to compare
"~/Desktop/ETH/ctDNA/run7/run2.final.csv",             #output file (csv)
"TUM")
update.packages()
update.packages()
library("devtools")
install.packages("devtools")
library(readr)
install.packages("readr")
install.packages(dplyr)
install.packages("dplyr")
install.packages("stringr")
install.packages("ggplot")
install.packages("ggplot2")
install.packages("ggalluvial")
install.packages("tidyverse")
library("devtools")
install_github("cbg-ethz/graphClust_NeurIPS")
install.packages(
"RGBL"
)
install.packages("graph")
install.packages("BiocManager")
BiocManager::install("Rgraphviz")
install.packages("BiocManager")
BiocManager::install("RBGL")
library(graphClust)
library(scales)
library(ggplot2)
library(survival)
library(dplyr)
# Load required libraries
library(survival)
library(survminer)
# # Simulate binary data from 3 clusters
# k_clust <- 9
# all_data <- read.csv("../data/undivided_binary_matrix.csv")
#
# clustered_data <- all_data[,c(3:66,69:74)]
#
# # put age and sex in last row
# clustered_data[,c(1:64,67:70,65:66)]
# clustered_data$AGE <- clustered_data$AGE-1
#
# #store results
# cluster_res <- readRDS("../results/custer_res.rds")
# Prepare session, load packages
rm(list=ls())
library(survival)
library(RColorBrewer)
# Load classification by mutation profile (cluster assignment) # CLUSTERS
cluster_res <- readRDS("../results/euler_memberships_8k_9clusters.rds")
setwd("~/Documents/GitHub/MARCS/analysis")
library(ggplot2)
library(survival)
library(dplyr)
# Load required libraries
library(survival)
library(survminer)
# # Simulate binary data from 3 clusters
# k_clust <- 9
# all_data <- read.csv("../data/undivided_binary_matrix.csv")
#
# clustered_data <- all_data[,c(3:66,69:74)]
#
# # put age and sex in last row
# clustered_data[,c(1:64,67:70,65:66)]
# clustered_data$AGE <- clustered_data$AGE-1
#
# #store results
# cluster_res <- readRDS("../results/custer_res.rds")
# Prepare session, load packages
rm(list=ls())
library(survival)
library(RColorBrewer)
# Load classification by mutation profile (cluster assignment) # CLUSTERS
#cluster_res <- readRDS("../results/euler_memberships_final_9.rds")
# cluster_res <- readRDS("./results/euler_memberships_final_26.rds")
cluster_res <- readRDS("../results/euler_memberships_8k_9clusters.rds")
# remove this line in the future (after package update on euler)
# cluster_res$clustermembership <- cluster_res$clustermembership[[1]]
# cluster_res <- readRDS("../results/custer_res.rds")
table(cluster_res$clustermembership)
# mut_cov_data <- read.csv("../data/undivided_binary_matrix.csv")
# import survival data
survdata <- read.csv("../data/diagCorrected_aml_mds_matrix_8k_new.csv")
# survdata$last_fu <- as.Date(survdata$last_fu, format = "%d.%m.%Y")
# survdata$firstdiagnosis_date <- as.Date(survdata$firstdiagnosis_date, format = "%d.%m.%Y")
# survdata$relapse_date <- as.Date(survdata$relapse_date, format = "%d.%m.%Y")
# survdata$type <- as.factor(survdata$)
survdata$WHO_2016 <- as.factor(survdata$WHO_2016)
survdata$WHO_2022 <- as.factor(survdata$WHO_2022)
#survdata$IPSSR_ELN <- as.factor(survdata$IPSSR_ELN)
survdata$ELN2022_IPSSM <- as.factor(survdata$ELN2022_IPSSM)
survdata$Cluster <- cluster_res$clustermembership
survdata$Cluster <- as.factor(survdata$Cluster)
levels(survdata$Cluster) <- LETTERS[1:length(unique(survdata$Cluster))]
survdata <- survdata[!(survdata$ELN2022_IPSSM) %in% "IPSSM_NA",]
survdata
survdata[survdata$Cluster=="E",]
survdata$WHO_2016[survdata$Cluster=="E"]
table(survdata$WHO_2016[survdata$Cluster=="E"])
