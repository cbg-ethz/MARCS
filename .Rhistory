),
box(title = "Chromosomal Aberrations", status = "success", solidHeader = TRUE, collapsible = TRUE, width = 12,
shinyWidgets::checkboxGroupButtons(inputId = "aberrations", label = "Aberrations",
choices = c("+8", "complex", "-17", "-5", "-7", "inv.16.", "inv.3.", "t.15.17.",
"t.6.9.", "t.8.21.", "t.9.11.", "t.9.22.", "t.v.11."),
justified = TRUE, status = "primary")
),
actionButton("submit", "Submit", class = "btn-primary"),
# Display error message if any
textOutput("displayErrorMessage")
)
)
} else {
# Results display UI
list(
fluidRow(
box(title = "Results", status = "info", solidHeader = TRUE,
"Here are 5 random numbers:",
verbatimTextOutput("randomNumbers"),
tags$h4("Entered Values:"),
uiOutput("enteredValues"),
actionButton("new_entry", "New Entry", class = "btn-primary")
)
)
)
}
})
# Display entered values
output$enteredValues <- renderUI({
if (!is.null(enteredValues())) {
list(
tags$p(paste("Age:", enteredValues()$age)),
tags$p(paste("Sex:", enteredValues()$sex)),
tags$p(paste("BM Blasts:", enteredValues()$bm_blasts, "%"))
# Add other entered values here
)
}
})
# Display error message
output$displayErrorMessage <- renderText({
errorMessage()
})
# Print entered data frame
observe({
if (!is.null(enteredDataFrame())) {
library(clustNet)
library(parallel)
validata <- enteredDataFrame()
output$validataTable <- renderTable({
validata() # Fetch the current value of the 'validata' reactive value
})
print(validata)
cluster_results <- readRDS("results/euler_memberships_8k_9clusters.rds")
source("./validation/get_classification.R")
mds_reclass <- get_classification(cluster_results, validata)
mds_reclass <- get_classification(cluster_results, validata)
print(mds_reclass)
}
})
}
shinyApp(ui, server)
setwd("~/Documents/GitHub/MARCS")
library(shiny)
library(shinydashboard)
library(shinyWidgets)
# Define UI with shinydashboard
ui <- dashboardPage(
dashboardHeader(title = "MARCS: MDS/AML Aggregative Risk Classification System", titleWidth = 1000),
dashboardSidebar(
sidebarMenu(
menuItem("Paper", tabName = "paper", icon = icon("file-text")),
tags$li(class = "treeview",
tags$ul(class = "treeview-menu menu-open", style = "display: block;",
tags$li(style = "margin-left: 20px; margin-top: 10px; white-space: normal;",
HTML("Doe, J., Smith, A., & Roe, P. (2024). A Revolutionary Approach to Data Analysis in Medicine. <em>Journal of Advanced Research</em>, 45(2), 123-134.")
),
tags$li(style = "margin-left: 20px; margin-top: 20px;",
tags$img(src = "test.png", height = "100px")
)
)
)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "paper",
fluidRow(
box(title = "Patient Info", status = "primary", solidHeader = TRUE,
numericInput("age", "Age", value = NA),
radioButtons("sex", "Sex", choices = c("Male", "Female"))
),
box(title = "Clinical Information", status = "warning", solidHeader = TRUE, collapsible = TRUE,
numericInput("bm_blasts", "BM_BLASTS", value = NA),
numericInput("hb", "HB", value = NA),
numericInput("plt", "PLT", value = NA),
numericInput("wbc", "WBC", value = NA)
),
box(title = "Gene Mutations", status = "info", solidHeader = TRUE, width = 12,
div(style = "height:200px; overflow-y: scroll;",
shinyWidgets::pickerInput("genes", "Select Genes", choices = c("ASXL1", "BCOR", "CBL", "CUX1", "DNMT3A", "ETV6", "EZH2", "GATA2",
"GNAS", "IDH1", "JAK2", "KIT", "KRAS", "MPL", "NF1", "NPM1", "PHF6",
"PTPN11", "RAD21", "RUNX1", "SF3B1", "SRSF2", "STAG2", "TET2", "TP53",
"U2AF1", "WT1", "ZRSR2", "IDH2", "NRAS", "CEBPA", "FLT3"),
multiple = TRUE, options = list(`actions-box` = TRUE, `selected-text-format` = "count > 3"))
)
),
box(title = "Chromosomal Aberrations", status = "success", solidHeader = TRUE, collapsible = TRUE, width = 12,
shinyWidgets::checkboxGroupButtons(inputId = "aberrations", label = "Aberrations",
choices = c("+8", "complex", "-17", "-5", "-7", "inv.16.", "inv.3.", "t.15.17.",
"t.6.9.", "t.8.21.", "t.9.11.", "t.9.22.", "t.v.11."),
justified = TRUE, status = "primary")
)
),
actionButton("submit", "Submit", class = "btn-primary"),
verbatimTextOutput("vectorOutput")
)
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive value to control the display state
displayState <- reactiveVal(TRUE)
# Reactive values for error messages
errorMessage <- reactiveVal("")
# Reactive value to store entered values
enteredValues <- reactiveVal(NULL)
# Reactive value to store the data frame of entered values
enteredDataFrame <- reactiveVal(NULL)
observeEvent(input$submit, {
# Reset error message
errorMessage("")
# Data consistency checks
if (input$age <= 0) {
errorMessage("Please control Age value.")
} else if (input$bm_blasts < 0 || input$bm_blasts > 100) {
errorMessage("Please control BM_BLASTS value.")
} else {
# If data is consistent, update display state and store entered values
displayState(FALSE)
enteredValues(list(
age = input$age,
sex = input$sex,
bm_blasts = input$bm_blasts,
hb = input$hb,
plt = input$plt,
wbc = input$wbc,
genes = input$genes,
aberrations = input$aberrations
))
# Create data frame of entered values
enteredDataFrame(data.frame(t(enteredValues())))
}
})
observeEvent(input$new_entry, {
displayState(TRUE)  # Reset to initial state for new entry
enteredValues(NULL) # Reset entered values
enteredDataFrame(NULL) # Reset entered data frame
})
# Patient recap UI
output$patientRecap <- renderUI({
if (!is.null(enteredValues())) {  # Display recap only after submission
list(
tags$h4("Patient Details Recap:"),
tags$p(paste("Age:", enteredValues()$age)),
tags$p(paste("Sex:", enteredValues()$sex)),
tags$p(paste("BM Blasts:", enteredValues()$bm_blasts, "%"))
# Add other recap details here
)
}
})
# Dynamic UI for main content
output$dynamicUI <- renderUI({
if (displayState()) {
# Initial input UI
list(
fluidRow(
box(title = "Patient Info", status = "primary", solidHeader = TRUE,
numericInput("age", "Age", value = NA),
radioButtons("sex", "Sex", choices = c("Male", "Female"))
),
box(title = "Clinical Information", status = "warning", solidHeader = TRUE, collapsible = TRUE,
numericInput("bm_blasts", "BM_BLASTS", value = NA),
numericInput("hb", "HB", value = NA),
numericInput("plt", "PLT", value = NA),
numericInput("wbc", "WBC", value = NA)
),
box(title = "Gene Mutations", status = "info", solidHeader = TRUE, width = 12,
div(style = "height:200px; overflow-y: scroll;",
shinyWidgets::pickerInput("genes", "Select Genes", choices = c("ASXL1", "BCOR", "CBL", "CUX1", "DNMT3A", "ETV6", "EZH2", "GATA2",
"GNAS", "IDH1", "JAK2", "KIT", "KRAS", "MPL", "NF1", "NPM1", "PHF6",
"PTPN11", "RAD21", "RUNX1", "SF3B1", "SRSF2", "STAG2", "TET2", "TP53",
"U2AF1", "WT1", "ZRSR2", "IDH2", "NRAS", "CEBPA", "FLT3"),
multiple = TRUE, options = list(`actions-box` = TRUE, `selected-text-format` = "count > 3"))
)
),
box(title = "Chromosomal Aberrations", status = "success", solidHeader = TRUE, collapsible = TRUE, width = 12,
shinyWidgets::checkboxGroupButtons(inputId = "aberrations", label = "Aberrations",
choices = c("+8", "complex", "-17", "-5", "-7", "inv.16.", "inv.3.", "t.15.17.",
"t.6.9.", "t.8.21.", "t.9.11.", "t.9.22.", "t.v.11."),
justified = TRUE, status = "primary")
),
actionButton("submit", "Submit", class = "btn-primary"),
# Display error message if any
textOutput("displayErrorMessage")
)
)
} else {
# Results display UI
list(
fluidRow(
box(title = "Results", status = "info", solidHeader = TRUE,
"Here are 5 random numbers:",
verbatimTextOutput("randomNumbers"),
tags$h4("Entered Values:"),
uiOutput("enteredValues"),
actionButton("new_entry", "New Entry", class = "btn-primary")
)
)
)
}
})
# Display entered values
output$enteredValues <- renderUI({
if (!is.null(enteredValues())) {
list(
tags$p(paste("Age:", enteredValues()$age)),
tags$p(paste("Sex:", enteredValues()$sex)),
tags$p(paste("BM Blasts:", enteredValues()$bm_blasts, "%"))
# Add other entered values here
)
}
})
# Display error message
output$displayErrorMessage <- renderText({
errorMessage()
})
# Print entered data frame
observe({
if (!is.null(enteredDataFrame())) {
library(clustNet)
library(parallel)
validata <- enteredDataFrame()
output$validataTable <- renderTable({
validata() # Fetch the current value of the 'validata' reactive value
})
print(validata)
cluster_results <- readRDS("results/euler_memberships_8k_9clusters.rds")
source("./validation/get_classification.R")
mds_reclass <- get_classification(cluster_results, validata)
mds_reclass <- get_classification(cluster_results, validata)
print(mds_reclass)
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
# Define UI with shinydashboard
ui <- dashboardPage(
dashboardHeader(title = "MARCS: MDS/AML Aggregative Risk Classification System", titleWidth = 500),
dashboardSidebar(
sidebarMenu(
menuItem("Paper", tabName = "paper", icon = icon("file-text")),
tags$li(class = "treeview",
tags$ul(class = "treeview-menu menu-open", style = "display: block;",
tags$li(style = "margin-left: 20px; margin-top: 10px; white-space: normal;",
HTML("Doe, J., Smith, A., & Roe, P. (2024). A Revolutionary Approach to Data Analysis in Medicine. <em>Journal of Advanced Research</em>, 45(2), 123-134.")
),
tags$li(style = "margin-left: 20px; margin-top: 20px;",
tags$img(src = "test.png", height = "100px")
)
)
),
uiOutput("patientRecap")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "paper",
uiOutput("dynamicUI")
)
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive value to control the display state
displayState <- reactiveVal(TRUE)
# Reactive values for error messages
errorMessage <- reactiveVal("")
observeEvent(input$submit, {
# Reset error message
errorMessage("")
# Data consistency checks
if (input$age <= 0) {
errorMessage("Please control Age value.")
} else if (input$bm_blasts < 0 || input$bm_blasts > 100) {
errorMessage("Please control BM_BLASTS value.")
} else {
# If data is consistent, update display state and patient details
displayState(FALSE)
}
})
observeEvent(input$new_entry, {
displayState(TRUE)  # Reset to initial state for new entry
})
# Patient recap UI
output$patientRecap <- renderUI({
if (!displayState()) {  # Display recap only after submission
list(
tags$h4("Patient Details Recap:"),
tags$p(paste("Age:", input$age)),
tags$p(paste("Sex:", input$sex)),
tags$p(paste("BM Blasts:", input$bm_blasts, "%"))
)
}
})
# Dynamic UI for main content
output$dynamicUI <- renderUI({
if (displayState()) {
# Initial input UI
list(
fluidRow(
box(title = "Patient Info", status = "primary", solidHeader = TRUE,
numericInput("age", "Age", value = NA),
radioButtons("sex", "Sex", choices = c("Male", "Female"))
),
box(title = "Clinical Information", status = "warning", solidHeader = TRUE, collapsible = TRUE,
numericInput("bm_blasts", "BM_BLASTS", value = NA),
numericInput("hb", "HB", value = NA),
numericInput("plt", "PLT", value = NA),
numericInput("wbc", "WBC", value = NA)
),
box(title = "Gene Mutations", status = "info", solidHeader = TRUE, width = 12,
div(style = "height:200px; overflow-y: scroll;",
lapply(c("ASXL1", "BCOR", "CBL", "CUX1", "DNMT3A", "ETV6", "EZH2", "GATA2",
"GNAS", "IDH1", "JAK2", "KIT", "KRAS", "MPL", "NF1", "NPM1", "PHF6",
"PTPN11", "RAD21", "RUNX1", "SF3B1", "SRSF2", "STAG2", "TET2", "TP53",
"U2AF1", "WT1", "ZRSR2", "IDH2", "NRAS", "CEBPA", "FLT3"), function(gene) {
radioButtons(paste0("gene_", gsub("[+]", "plus", gsub("[-./ ]", "_", gene))), label = gene, choices = c("NA" = "NA", "Mutated" = "Mutated", "Unmutated" = "Unmutated"), selected = "NA")
})
)
),
box(title = "Chromosomal Aberrations", status = "success", solidHeader = TRUE, collapsible = TRUE, width = 12,
div(style = "height:200px; overflow-y: scroll;",
lapply(c("+8", "complex", "-17", "-5", "-7", "inv.16", "inv.3", "t.15.17",
"t.6.9", "t.8.21", "t.9.11", "t.9.22", "t.v.11."), function(aberration) {
radioButtons(paste0("aberration_", gsub("[+]", "plus", gsub("[-./ ]", "_", aberration))), label = aberration, choices = c("NA" = "NA", "Mutated" = "Mutated", "Unmutated" = "Unmutated"), selected = "NA")
})
)
),
actionButton("submit", "Submit", class = "btn-primary"),
textOutput("displayErrorMessage")
)
)
} else {
# Results display UI
list(
fluidRow(
box(title = "Results", status = "info", solidHeader = TRUE,
"Here are 5 random numbers:",
verbatimTextOutput("randomNumbers"),
tags$img(src = "asd.png", height = "100px"),
tags$img(src = "asd2.png", height = "100px"),
actionButton("new_entry", "New Entry", class = "btn-primary")
)
)
)
}
})
# Display error message
output$displayErrorMessage <- renderText({
errorMessage()
})
# Generate 5 random numbers for display
output$randomNumbers <- renderText({
paste(sample(1:100, 5), collapse = ", ")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
# Define UI with shinydashboard
ui <- dashboardPage(
dashboardHeader(title = "MARCS: MDS/AML Aggregative Risk Classification System", titleWidth = 500),
dashboardSidebar(
sidebarMenu(
menuItem("Paper", tabName = "paper", icon = icon("file-text")),
tags$li(class = "treeview",
tags$ul(class = "treeview-menu menu-open", style = "display: block;",
tags$li(style = "margin-left: 20px; margin-top: 10px; white-space: normal;",
HTML("Doe, J., Smith, A., & Roe, P. (2024). A Revolutionary Approach to Data Analysis in Medicine. <em>Journal of Advanced Research</em>, 45(2), 123-134.")
),
tags$li(style = "margin-left: 20px; margin-top: 20px;",
tags$img(src = "test.png", height = "100px")
)
)
),
uiOutput("patientRecap")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "paper",
uiOutput("dynamicUI")
)
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive value to control the display state
displayState <- reactiveVal(TRUE)
# Reactive values for error messages
errorMessage <- reactiveVal("")
observeEvent(input$submit, {
# Reset error message
errorMessage("")
# Data consistency checks
if (input$age <= 0) {
errorMessage("Please control Age value.")
} else if (input$bm_blasts < 0 || input$bm_blasts > 100) {
errorMessage("Please control BM_BLASTS value.")
} else {
# If data is consistent, update display state and patient details
displayState(FALSE)
}
})
observeEvent(input$new_entry, {
displayState(TRUE)  # Reset to initial state for new entry
})
# Patient recap UI
output$patientRecap <- renderUI({
if (!displayState()) {  # Display recap only after submission
list(
tags$h4("Patient Details Recap:"),
tags$p(paste("Age:", input$age)),
tags$p(paste("Sex:", input$sex)),
tags$p(paste("BM Blasts:", input$bm_blasts, "%"))
)
}
})
# Dynamic UI for main content
output$dynamicUI <- renderUI({
if (displayState()) {
# Initial input UI
list(
fluidRow(
box(title = "Patient Info", status = "primary", solidHeader = TRUE,
numericInput("age", "Age", value = NA),
radioButtons("sex", "Sex", choices = c("Male", "Female"))
),
box(title = "Clinical Information", status = "warning", solidHeader = TRUE, collapsible = TRUE,
numericInput("bm_blasts", "BM_BLASTS", value = NA),
numericInput("hb", "HB", value = NA),
numericInput("plt", "PLT", value = NA),
numericInput("wbc", "WBC", value = NA)
),
box(title = "Gene Mutations", status = "info", solidHeader = TRUE, width = 12,
div(style = "height:200px",
lapply(c("ASXL1", "BCOR", "CBL", "CUX1", "DNMT3A", "ETV6", "EZH2", "GATA2",
"GNAS", "IDH1", "JAK2", "KIT", "KRAS", "MPL", "NF1", "NPM1", "PHF6",
"PTPN11", "RAD21", "RUNX1", "SF3B1", "SRSF2", "STAG2", "TET2", "TP53",
"U2AF1", "WT1", "ZRSR2", "IDH2", "NRAS", "CEBPA", "FLT3"), function(gene) {
radioButtons(paste0("gene_", gsub("[+]", "plus", gsub("[-./ ]", "_", gene))), label = gene, choices = c("NA" = "NA", "Mutated" = "Mutated", "Unmutated" = "Unmutated"), selected = "NA")
})
)
),
box(title = "Chromosomal Aberrations", status = "success", solidHeader = TRUE, collapsible = TRUE, width = 12,
div(style = "height:200px; overflow-y: scroll;",
lapply(c("+8", "complex", "-17", "-5", "-7", "inv.16", "inv.3", "t.15.17",
"t.6.9", "t.8.21", "t.9.11", "t.9.22", "t.v.11."), function(aberration) {
radioButtons(paste0("aberration_", gsub("[+]", "plus", gsub("[-./ ]", "_", aberration))), label = aberration, choices = c("NA" = "NA", "Mutated" = "Mutated", "Unmutated" = "Unmutated"), selected = "NA")
})
)
),
actionButton("submit", "Submit", class = "btn-primary"),
textOutput("displayErrorMessage")
)
)
} else {
# Results display UI
list(
fluidRow(
box(title = "Results", status = "info", solidHeader = TRUE,
"Here are 5 random numbers:",
verbatimTextOutput("randomNumbers"),
tags$img(src = "asd.png", height = "100px"),
tags$img(src = "asd2.png", height = "100px"),
actionButton("new_entry", "New Entry", class = "btn-primary")
)
)
)
}
})
# Display error message
output$displayErrorMessage <- renderText({
errorMessage()
})
# Generate 5 random numbers for display
output$randomNumbers <- renderText({
paste(sample(1:100, 5), collapse = ", ")
})
}
shinyApp(ui, server)
cluster_results <- readRDS("results/euler_memberships_8k_9clusters.rds")
cluster_results
cluster_results$data
colnames(cluster_results$data)
