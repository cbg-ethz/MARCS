library(GenomicRanges)
library(ggplot2)
library(Rsamtools)
library(readr)
library(maftools)
library(DPClust)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rsamtools")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("readr")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("QDNAseq")
install.packages("cghRA")
source("http://bioconductor.org/biocLite.R"); biocLite(c("optparse","KernSmooth","ks","lattice","ggplot2","gridExtra"))
source("http://bioconductor.org/biocLite.R"); biocLite(c("optparse","VariantAnnotation","GenomicRanges","Rsamtools","ggplot2","IRanges","S4Vectors","reshape2"))'
devtools::install_github("Wedge-Oxford/dpclust3p")
devtools::install_github("Wedge-Oxford/dpclust3p")
install.packages("devtools")
devtools::install_github("Wedge-Oxford/dpclust3p")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
source("http://bioconductor.org/biocLite.R"); biocLite(c("optparse","VariantAnnotation","GenomicRanges","Rsamtools","ggplot2","IRanges","S4Vectors","reshape2"))'
BiocManager::install(c("VariantAnnotation","optparse","GenomicRanges","Rsamtools","ggplot2","IRanges","S4Vectors","reshape2"))
devtools::install_github("Wedge-Oxford/dpclust3p")
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS"=TRUE)
devtools::install_github("Wedge-Oxford/dpclust3p")
#install/load packages needed
packages <- c("xlsx", "gdata", "plyr", "png", "data.table")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
lapply(packages, require, character.only=T)
confronti.multipli <- function(mut.file, path, out.file, contr=c("GL", "TUM")){
contro <- pmatch(contr, c("GL", "TUM"))
if(is.na(contro)) {
#img <- readPNG("S:\\GL_Rossi\\Common\\R_SCRIPT\\ConfrontiMultipli\\imagelodo.png")
#grid::grid.raster(img)
#stop('Ahia, anvedi che machinata che me so pijato! Riprova con GL o TUM')
}
library(data.table)
path <- path
filenames <- list.files(path, pattern = ".txt")
filenames
mut <<- fread(mut.file, header = T)
n=ncol(mut)
if (contr == "GL"){
for (j in filenames){
#print(filenames)
print(j)
confr <<- fread(paste(path, j, sep=""), sep="\t", header=T)
#confr$var[confr$var == ""] <- "A"
mut <- merge(mut, confr[,c("chrom", "position", "ref_new", "var_new", "tumor_var_freq")], by.x=c("chrom", "position", "ref_new", "var_new"), by.y=c("chrom", "position", "ref_new", "var_new"), all.x=T)
mut <- join(mut, confr[,c("chrom", "position", "ref_new", "var_new", "normal_var_freq")], by=c("chrom", "position", "ref_new", "var_new"))
colnames(mut)[ncol(mut)] <- strsplit(as.character(j), "\\.")[[1]][1]
}
}
else if (contr == "TUM"){
for (j in filenames){
print(j)
#print(filenames)
confr <<- fread(paste(path, j, sep=""), sep="\t", header=T)
mut <- join(mut, confr[,c("chrom", "position", "ref_new", "var_new", "tumor_var_freq")], by=c("chrom", "position", "ref_new", "var_new"))
colnames(mut)[ncol(mut)] <- strsplit(as.character(j), "\\.")[[1]][1]
}
}
mut[,(n+1):ncol(mut)][is.na(mut[,(n+1):ncol(mut)])] <- 0
#colnames(mut)[c((n+1):ncol(mut))] <- filenames
write.csv(mut, out.file, dec=".", sep = ",", row.names = F)
}
#options(java.parameters = "-Xmx2048m")
confronti.multipli("~/Desktop/redo/redo/samples_rerun.csv",                               #input mutation file (excel)
"/Volumes/MEMORIA/Belli_DATA/PL/",                                                            #path to txt files to compare
"~/Desktop/redo/redo/rerun_multipli.csv",             #output file (csv)
"TUM")
#install/load packages needed
packages <- c("xlsx", "gdata", "plyr", "png", "data.table")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
lapply(packages, require, character.only=T)
##function below##
#NOTE GENERALI
#Trasformare excel in .txt
#Se non si fa il match per 'var' si puo osservare una vaf!=0 per un altro cambio nucleotidico
#Mettere un k e aumentarlo a ogni iteration aumenta di molto il tempo della funzione
#DA FARE
#Si potrebbe mettere IF nella funzione con %in% per eliminare un input
#Problema se colonna chiamata con un nome diverso dal normale
confronti.multipli <- function(mut.file, path, out.file, contr=c("GL", "TUM")){
contro <- pmatch(contr, c("GL", "TUM"))
if(is.na(contro)) {
#img <- readPNG("S:\\GL_Rossi\\Common\\R_SCRIPT\\ConfrontiMultipli\\imagelodo.png")
#grid::grid.raster(img)
#stop('Ahia, anvedi che machinata che me so pijato! Riprova con GL o TUM')
}
library(data.table)
path <- path
filenames <- list.files(path, pattern = ".txt")
filenames
mut <<- fread(mut.file, header = T)
n=ncol(mut)
if (contr == "GL"){
for (j in filenames){
#print(filenames)
print(j)
confr <<- fread(paste(path, j, sep=""), sep="\t", header=T)
#confr$var[confr$var == ""] <- "A"
mut <- merge(mut, confr[,c("chrom", "position", "ref_new", "var_new", "tumor_var_freq")], by.x=c("chrom", "position", "ref_new", "var_new"), by.y=c("chrom", "position", "ref_new", "var_new"), all.x=T)
mut <- join(mut, confr[,c("chrom", "position", "ref_new", "var_new", "normal_var_freq")], by=c("chrom", "position", "ref_new", "var_new"))
colnames(mut)[ncol(mut)] <- strsplit(as.character(j), "\\.")[[1]][1]
}
}
else if (contr == "TUM"){
for (j in filenames){
print(j)
#print(filenames)
confr <<- fread(paste(path, j, sep=""), sep="\t", header=T)
mut <- join(mut, confr[,c("chrom", "position", "ref_new", "var_new", "tumor_var_freq")], by=c("chrom", "position", "ref_new", "var_new"))
colnames(mut)[ncol(mut)] <- strsplit(as.character(j), "\\.")[[1]][1]
}
}
mut[,(n+1):ncol(mut)][is.na(mut[,(n+1):ncol(mut)])] <- 0
#colnames(mut)[c((n+1):ncol(mut))] <- filenames
write.csv(mut, out.file, dec=".", sep = ",", row.names = F)
}
#options(java.parameters = "-Xmx2048m")
confronti.multipli("~/Desktop/csv_27lug/run5.csv",                               #input mutation file (excel)
"/Volumes/MEMORIA/Belli_DATA/PL/",                                                            #path to txt files to compare
"~/Desktop/redo/redo/rerun_multipli.csv",             #output file (csv)
"TUM")
#options(java.parameters = "-Xmx2048m")
confronti.multipli("~/Desktop/csv_27lug/run5.csv",                               #input mutation file (excel)
"/Volumes/MEMORIA/Belli_DATA/PL/",                                                            #path to txt files to compare
"~/Desktop/csv_27lug/run5_multipli.csv",             #output file (csv)
"TUM")
setwd("~/Desktop/validation/")
library(Canopy)
library(scatterplot3d)
data(AML43)
R=AML43$R; X=AML43$X
dim(R);dim(X)
R
head(R)
head(X)
AML43
for(i in 1:dim(t1_t2_t3C@clust$cluster.means)[2])
)
dim(t1_t2_t3C@clust$cluster.means)[2]
library(facets)
remotes::install_github("mskcc/pctGCdata")
remotes::install_github("mskcc/facets")
p.adjust(0.05, method= "holm", n=370000)
test <- rep(0.05, 370000)
test
p.adjust(test, method= "holm", n=length(test))
#install/load packages needed
packages <- c("xlsx", "gdata", "plyr", "png", "data.table")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
lapply(packages, require, character.only=T)
confronti.multipli <- function(mut.file, path, out.file, contr=c("GL", "TUM")){
contro <- pmatch(contr, c("GL", "TUM"))
if(is.na(contro)) {
#img <- readPNG("S:\\GL_Rossi\\Common\\R_SCRIPT\\ConfrontiMultipli\\imagelodo.png")
#grid::grid.raster(img)
#stop('Ahia, anvedi che machinata che me so pijato! Riprova con GL o TUM')
}
library(data.table)
path <- path
filenames <- list.files(path, pattern = ".txt")
filenames
mut <<- fread(mut.file, header = T)
n=ncol(mut)
if (contr == "GL"){
for (j in filenames){
#print(filenames)
print(j)
confr <<- fread(paste(path, j, sep=""), sep="\t", header=T)
#confr$var[confr$var == ""] <- "A"
mut <- merge(mut, confr[,c("chrom", "position", "ref_new", "var_new", "tumor_var_freq")], by.x=c("chrom", "position", "ref_new", "var_new"), by.y=c("chrom", "position", "ref_new", "var_new"), all.x=T)
mut <- join(mut, confr[,c("chrom", "position", "ref_new", "var_new", "normal_var_freq")], by=c("chrom", "position", "ref_new", "var_new"))
colnames(mut)[ncol(mut)] <- strsplit(as.character(j), "\\.")[[1]][1]
}
}
else if (contr == "TUM"){
for (j in filenames){
print(j)
#print(filenames)
confr <<- fread(paste(path, j, sep=""), sep="\t", header=T)
mut <- join(mut, confr[,c("chrom", "position", "ref_new", "var_new", "tumor_var_freq")], by=c("chrom", "position", "ref_new", "var_new"))
colnames(mut)[ncol(mut)] <- strsplit(as.character(j), "\\.")[[1]][1]
}
}
mut[,(n+1):ncol(mut)][is.na(mut[,(n+1):ncol(mut)])] <- 0
#colnames(mut)[c((n+1):ncol(mut))] <- filenames
write.csv(mut, out.file, dec=".", sep = ",", row.names = F)
}
#options(java.parameters = "-Xmx2048m")
confronti.multipli("~/Desktop/ETH/ctDNA/run2/run2.csv",                               #input mutation file (excel)
"/Volumes/MEMORIA/Belli_DATA/PL/",                                                            #path to txt files to compare
"~/Desktop/ETH/ctDNA/run2/run2.final.csv",             #output file (csv)
"TUM")
#options(java.parameters = "-Xmx2048m")
confronti.multipli("~/Desktop/ETH/ctDNA/run2_redo150/run2_redo150.csv",                               #input mutation file (excel)
"/Volumes/MEMORIA/Belli_DATA/PL/",                                                            #path to txt files to compare
"~/Desktop/ETH/ctDNA/run2_redo150/run2_redo150.final.csv",             #output file (csv)
"TUM")
#options(java.parameters = "-Xmx2048m")
confronti.multipli("~/Desktop/ETH/ctDNA/run2replicate_dec2022/run2replicate_dec2022.csv",                               #input mutation file (excel)
"/Volumes/MEMORIA/Belli_DATA/PL/",                                                            #path to txt files to compare
"~/Desktop/ETH/ctDNA/run2replicate_dec2022//run2replicate_dec2022.final.csv",             #output file (csv)
"TUM")
#options(java.parameters = "-Xmx2048m")
confronti.multipli("~/Desktop/ETH/ctDNA/run7/run7.csv",                               #input mutation file (excel)
"/Volumes/MEMORIA/Belli_DATA/PL/",                                                            #path to txt files to compare
"~/Desktop/ETH/ctDNA/run7/run2.final.csv",             #output file (csv)
"TUM")
update.packages()
update.packages()
library("devtools")
install.packages("devtools")
library(readr)
install.packages("readr")
install.packages(dplyr)
install.packages("dplyr")
install.packages("stringr")
install.packages("ggplot")
install.packages("ggplot2")
install.packages("ggalluvial")
install.packages("tidyverse")
library("devtools")
install_github("cbg-ethz/graphClust_NeurIPS")
install.packages(
"RGBL"
)
install.packages("graph")
install.packages("BiocManager")
BiocManager::install("Rgraphviz")
install.packages("BiocManager")
BiocManager::install("RBGL")
setwd("~/Documents/GitHub/diagchallenge/DiagChallenge/comparison")
read.csv("./undivided_binary_only_matrix_8k.csv")
totdata <- read.csv("./undivided_binary_only_matrix_8k.csv")
View(totdata)
totdata$WHO_2016
unique(totdata$WHO_2016)
# Create a vector
aml_vector <- c("AML t(8;21)", "AML NOS", "AML MRC", "AML NPM1", "AML CEBPAbi",
"AML RUNX1", "AML inv(3)", "AML inv(16)", "AML t(6;9)",
"AML t(9;11)", "AML t(15;17)", "aCML")
totdata$WHO_2016 %in% aml_vector
totdata[totdata$WHO_2016 %in% aml_vector,]
amldata <- totdata[totdata$WHO_2016 %in% aml_vector,]
amldata$WHO_2016
unique(amldata$WHO_2016)
mdsdata <- totdata[!totdata$WHO_2016 %in% aml_vector,]
unique(mdsdata$WHO_2016)
totdata <- read.csv("./undivided_binary_only_matrix_8k.csv")
# Create a vector
aml_vector <- c("AML t(8;21)", "AML NOS", "AML MRC", "AML NPM1", "AML CEBPAbi",
"AML RUNX1", "AML inv(3)", "AML inv(16)", "AML t(6;9)",
"AML t(9;11)", "AML t(15;17)", "aCML")
amldata <- totdata[totdata$WHO_2016 %in% aml_vector,]
mdsdata <- totdata[!totdata$WHO_2016 %in% aml_vector,]
write.csv(amldata, file = "./aml_only.csv", quote = F, row.names=FALSE)
write.csv(mdsdata, file = "./mds_only.csv", quote = F, row.names=FALSE)
dim(amldata)
dim(mdsdata)
colnames(mdsdata)
unique(mdsdata$WHO_2016)
unique(aml$WHO_2016)
unique(amldata$WHO_2016)
dim(totdata)
unique(totdata$WHO_2016)
unique(totdata$ELN2022_IPSSM)
unique(totdata$WHO_2022)
unique(totdata$ICC)
mutation_covariate_data <- read.csv("../data/diagCorrected_aml_mds_matrix_8k.csv")
mutation_covariate_data
mutation_covariate_data$WHO_2016
unique(mutation_covariate_data$WHO_2016)
dim(mutation_covariate_data)
View(mutation_covariate_data)
mutation_covariate_data <- read.csv("../data/diagCorrected_aml_mds_matrix_8k.csv")
head(totdata)
head(totdata$ID)
head(mutation_covariate_data$ID)
merge(totdata,mutation_covariate_data, by = ID)
merge(totdata,mutation_covariate_data, by = "ID")
unique(totdata$ID %in% mutation_covariate_data$ID)
totdata <- totdata[order(totdata$ID), ]
mutation_covariate_data <- mutation_covariate_data[order(mutation_covariate_dat$ID), ]
mutation_covariate_data <- mutation_covariate_data[order(mutation_covariate_data$ID), ]
dim(mutation_covariate_data)
totdata$WHO_2016 <- mutation_covariate_data$WHO_2016
# Create a vector
aml_vector <- c("AML t(8;21)", "AML NOS", "AML MRC", "AML NPM1", "AML CEBPAbi",
"AML RUNX1", "AML inv(3)", "AML inv(16)", "AML t(6;9)",
"AML t(9;11)", "AML t(15;17)", "aCML")
amldata <- totdata[totdata$WHO_2016 %in% aml_vector,]
mdsdata <- totdata[!totdata$WHO_2016 %in% aml_vector,]
write.csv(amldata, file = "./aml_only.csv", quote = F, row.names=FALSE)
write.csv(mdsdata, file = "./mds_only.csv", quote = F, row.names=FALSE)
dim(amldata)
dim(mdsdata)
amldata$WHO_2016
unique(amldata$WHO_2016)
unique(mdsdata$WHO_2016)
library(graphClust)
colnames(amldata)
library(clustNet)
totdata <- read.csv("./undivided_binary_only_matrix_8k.csv")
mutation_covariate_data <- read.csv("../data/diagCorrected_aml_mds_matrix_8k.csv")
unique(totdata$ID %in% mutation_covariate_data$ID)
totdata <- totdata[order(totdata$ID), ]
mutation_covariate_data <- mutation_covariate_data[order(mutation_covariate_data$ID), ]
totdata$WHO_2016 <- mutation_covariate_data$WHO_2016
# Create a vector
aml_vector <- c("AML t(8;21)", "AML NOS", "AML MRC", "AML NPM1", "AML CEBPAbi",
"AML RUNX1", "AML inv(3)", "AML inv(16)", "AML t(6;9)",
"AML t(9;11)", "AML t(15;17)", "aCML")
amldata <- totdata[totdata$WHO_2016 %in% aml_vector,]
mdsdata <- totdata[!totdata$WHO_2016 %in% aml_vector,]
write.csv(amldata, file = "./aml_only.csv", quote = F, row.names=FALSE)
write.csv(mdsdata, file = "./mds_only.csv", quote = F, row.names=FALSE)
all_data <- amldata
# remove survival data, classifications and patient id
index_remove <- c(which(colnames(all_data)=="ID"), which(colnames(all_data)=="OS"),
which(colnames(all_data)=="OS_STATUS"), which(colnames(all_data)=="IPSSR_ELN"),
which(colnames(all_data)=="WHO_2016"), which(colnames(all_data)=="WHO_2022"),
which(colnames(all_data)=="ICC"), which(colnames(all_data)=="ELN2022_IPSSM"))
mut_cov_data <- all_data[,-index_remove]
rownames(mut_cov_data) <- all_data$ID
mut_cov_data
bestAICsearch(amldata)
bestAICsearch(binaryMatrix = amldata)
aml
amldata
bestAICsearch(binaryMatrix = mut_cov_data)
bestAICsearch(binaryMatrix = mut_cov_data, minK = 3 , maxK = 9)
totdata <- read.csv("./undivided_binary_only_matrix_8k.csv")
mutation_covariate_data <- read.csv("../data/diagCorrected_aml_mds_matrix_8k.csv")
unique(totdata$ID %in% mutation_covariate_data$ID)
totdata <- totdata[order(totdata$ID), ]
mutation_covariate_data <- mutation_covariate_data[order(mutation_covariate_data$ID), ]
totdata$WHO_2016 <- mutation_covariate_data$WHO_2016
# Create a vector
aml_vector <- c("AML t(8;21)", "AML NOS", "AML MRC", "AML NPM1", "AML CEBPAbi",
                "AML RUNX1", "AML inv(3)", "AML inv(16)", "AML t(6;9)",
                "AML t(9;11)", "AML t(15;17)", "aCML")
amldata <- totdata[totdata$WHO_2016 %in% aml_vector,]
mdsdata <- totdata[!totdata$WHO_2016 %in% aml_vector,]
amldata
library(clustNet)
all_data <- amldata
# remove survival data, classifications and patient id 
index_remove <- c(which(colnames(all_data)=="ID"), which(colnames(all_data)=="OS"), 
                  which(colnames(all_data)=="OS_STATUS"), which(colnames(all_data)=="IPSSR_ELN"), 
                  which(colnames(all_data)=="WHO_2016"), which(colnames(all_data)=="WHO_2022"),
                  which(colnames(all_data)=="ICC"), which(colnames(all_data)=="ELN2022_IPSSM"))
mut_cov_data <- all_data[,-index_remove]
rownames(mut_cov_data) <- all_data$ID
bestAICsearch(binaryMatrix = mut_cov_data, minK = 3 , maxK = 9)
install.packagtes("clustNet") 
install.packages("clustNet") 
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install(version = "3.17")
BiocManager::install(version = "3.14")
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("graph")
install.packages("clustNet") 
BiocManager::install("RBGL")
BiocManager::install("ERROR: dependency ‘RBGL’ is not available for package ‘pcalg’")
* removing ‘/cluster/home/mroncador/R/x86_64-pc-linux-gnu-library/4.1/pcalg’
ERROR: dependencies ‘Rgraphviz’, ‘RBGL’, ‘pcalg’ are not available for package ‘BiDAG’
* removing ‘/cluster/home/mroncador/R/x86_64-pc-linux-gnu-library/4.1/BiDAG’
ERROR: dependencies ‘BiDAG’, ‘pcalg’, ‘RBGL’ are not available for package ‘clustNet’
* removing ‘/cluster/home/mroncador/R/x86_64-pc-linux-gnu-library/4.1/clustNet’
BiocManager::install("RRgraphviz")
BiocManager::install("Rgraphviz")
BiocManager::install("‘BiDAG’")
install.packages("clustNet") 
BiocManager::install("‘pcalg’")
install.packages("pcalg") 
install.packages("pcalg") 
install.packages("clustNet") 
install.packages("BiDAG") 
install.packages("pcalg") 
install.packages("pcalg") 
install.packages("pcalg") ∂
install.packages("BiDAG") 
install.packages("pcalg") 
install.packages("BiDAG") 
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install(version = "3.17")
BiocManager::install(version = "3.16")
BiocManager::install(version = "3.16")
library("BiDAG") 
library(BiDAG) 
library(pcalg) 
BiocManager::install(version = "3.16")
BiocManager::install(version = "3.16", lib="/cluster/home/mroncador/R/x86_64-pc-linux-gnu-library/4.2")
install.packages("clustNet") 
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("Rgraphviz")
install.packages("clustNet") 
